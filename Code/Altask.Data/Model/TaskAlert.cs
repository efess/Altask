//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Altask.Data.Model
{
    using Altask.Data;
    using Newtonsoft.Json;
    using System;
    using System.Xml;
    using System;
    using System.Collections.Generic;
    
    public partial class TaskAlert : ISupportsLongId, ISupportsAuthorFields
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public TaskAlert()
        {
            this.Logs = new HashSet<TaskAlertLog>();
            this.Users = new HashSet<TaskAlertUser>();
        }
    
    	/// <summary>
    	/// Gets or sets the Id of this <see cref='Altask.Data.Model.TaskAlert'/>.
    	/// </summary>
        public long Id { get; set; }
    	/// <summary>
    	/// Gets or sets the Active of this <see cref='Altask.Data.Model.TaskAlert'/>.
    	/// </summary>
        public bool Active { get; set; }
    	/// <summary>
    	/// Gets or sets the TaskId of this <see cref='Altask.Data.Model.TaskAlert'/>.
    	/// </summary>
        public long TaskId { get; set; }
    	/// <summary>
    	/// Gets or sets the Name of this <see cref='Altask.Data.Model.TaskAlert'/>.
    	/// </summary>
        public string Name { get; set; }
    	/// <summary>
    	/// Gets or sets the TimeN of this <see cref='Altask.Data.Model.TaskAlert'/>.
    	/// </summary>
        public Nullable<int> TimeN { get; set; }
    	/// <summary>
    	/// Gets or sets the TimeUnit of this <see cref='Altask.Data.Model.TaskAlert'/>.
    	/// </summary>
        public string TimeUnit { get; set; }
    	/// <summary>
    	/// Gets or sets the When of this <see cref='Altask.Data.Model.TaskAlert'/>.
    	/// </summary>
        public string When { get; set; }
    	/// <summary>
    	/// Gets or sets the IfNot of this <see cref='Altask.Data.Model.TaskAlert'/>.
    	/// </summary>
        public Nullable<bool> IfNot { get; set; }
    	/// <summary>
    	/// Gets or sets the IfStatus of this <see cref='Altask.Data.Model.TaskAlert'/>.
    	/// </summary>
        public string IfStatus { get; set; }
    	/// <summary>
    	/// Gets or sets the Metadata of this <see cref='Altask.Data.Model.TaskAlert'/>.
    	/// </summary>
        public string Metadata { get; set; }
    	/// <summary>
    	/// Gets or sets the CreatedBy of this <see cref='Altask.Data.Model.TaskAlert'/>.
    	/// </summary>
        public string CreatedBy { get; set; }
    	/// <summary>
    	/// Gets or sets the CreatedOn of this <see cref='Altask.Data.Model.TaskAlert'/>.
    	/// </summary>
        public System.DateTime CreatedOn { get; set; }
    	/// <summary>
    	/// Gets or sets the UpdatedBy of this <see cref='Altask.Data.Model.TaskAlert'/>.
    	/// </summary>
        public string UpdatedBy { get; set; }
    	/// <summary>
    	/// Gets or sets the UpdatedOn of this <see cref='Altask.Data.Model.TaskAlert'/>.
    	/// </summary>
        public System.DateTime UpdatedOn { get; set; }
    
        public virtual ICollection<TaskAlertLog> Logs { get; set; }
        public virtual ICollection<TaskAlertUser> Users { get; set; }
    }
    
    public static partial class Mapper {
    	/// <summary>
    	/// Maps a <see cref='Altask.Data.Model.TaskAlert'/> object to a <see cref='Altask.Data.Dto.TaskAlert'/> object.
    	/// </summary>
    	/// <param name="includeLogs">Indicates whether to load any logs associated with the object when mapping.</param>
    	public static Altask.Data.Dto.TaskAlert ToDto(this Altask.Data.Model.TaskAlert entity, bool includeLogs = false) {
    		var dto = new Altask.Data.Dto.TaskAlert();
    		dto.Id = entity.Id;
    		dto.Active = entity.Active;
    		dto.TaskId = entity.TaskId;
    		dto.Name = entity.Name;
    		dto.TimeN = entity.TimeN;
    		dto.TimeUnit = entity.TimeUnit;
    		dto.When = entity.When;
    		dto.IfNot = entity.IfNot;
    		dto.IfStatus = entity.IfStatus;
    		dto.Metadata = JsonConvert.DeserializeObject("{Properties: []}");
    
    		if (!string.IsNullOrEmpty(entity.Metadata)) {
    			try {
    				XmlDocument doc = new XmlDocument();
    				doc.LoadXml(entity.Metadata);
    				string json = Json.SerizlieXmlDocument(doc);
    				dto.Metadata = JsonConvert.DeserializeObject(json);
    			} catch(Exception) {}
    		}
    
    		dto.CreatedBy = entity.CreatedBy;
    		dto.CreatedOn = entity.CreatedOn;
    		dto.UpdatedBy = entity.UpdatedBy;
    		dto.UpdatedOn = entity.UpdatedOn;
    
    		dto.Logs = new List<Altask.Data.Dto.TaskAlertLog>();
    
    		if (includeLogs) {
    			if (entity.Logs != null) {
    				foreach(var item in entity.Logs) {
    					dto.Logs.Add(item.ToDto());
    				}
    			}
    		}
    			
    		dto.Users = new List<Altask.Data.Dto.TaskAlertUser>();
    		
    		if (entity.Users != null) {
    			foreach(var item in entity.Users) {
    				dto.Users.Add(item.ToDto());
    			}
    		}
    
    		return dto;
    	}
    
    	/// <summary>
    	/// Maps all the non-primary key and tracking properties of a <see cref='Altask.Data.Dto.TaskAlert'/> object to a <see cref='Altask.Data.Model.TaskAlert'/> object.
    	/// </summary>
    	public static Altask.Data.Model.TaskAlert FromDto(this Altask.Data.Model.TaskAlert model, Altask.Data.Dto.TaskAlert entity) {
    		model.Active = entity.Active;
    		model.TaskId = entity.TaskId;
    		model.Name = entity.Name;
    		model.TimeN = entity.TimeN;
    		model.TimeUnit = entity.TimeUnit;
    		model.When = entity.When;
    		model.IfNot = entity.IfNot;
    		model.IfStatus = entity.IfStatus;
    		model.Metadata = string.Empty;
    
    		try {
    			model.Metadata = ((XmlDocument)JsonConvert.DeserializeXmlNode(entity.Metadata.ToString(), "Properties")).OuterXml;
    		} catch(Exception) {}
    
    		return model;
    	}
    }
}
