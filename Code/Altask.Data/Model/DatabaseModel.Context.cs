//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Altask.Data.Model
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class AltaskEntities : DbContext
    {
        public AltaskEntities()
            : base("name=AltaskEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Asset> Assets { get; set; }
        public virtual DbSet<AssetAlert> AssetAlerts { get; set; }
        public virtual DbSet<AssetAlertLog> AssetAlertLogs { get; set; }
        public virtual DbSet<AssetAlertUser> AssetAlertUsers { get; set; }
        public virtual DbSet<AssetGroup> AssetGroups { get; set; }
        public virtual DbSet<AssetGrouping> AssetGroupings { get; set; }
        public virtual DbSet<AssetLog> AssetLogs { get; set; }
        public virtual DbSet<AssetLogResolution> AssetLogResolutions { get; set; }
        public virtual DbSet<AssetLogType> AssetLogTypes { get; set; }
        public virtual DbSet<AssetLogTypeAsset> AssetLogTypeAssets { get; set; }
        public virtual DbSet<AssetLogTypeCategory> AssetLogTypeCategories { get; set; }
        public virtual DbSet<AssetType> AssetTypes { get; set; }
        public virtual DbSet<Department> Departments { get; set; }
        public virtual DbSet<Form> Forms { get; set; }
        public virtual DbSet<FormLog> FormLogs { get; set; }
        public virtual DbSet<Manufacturer> Manufacturers { get; set; }
        public virtual DbSet<Occurrence> Occurrences { get; set; }
        public virtual DbSet<OccurrenceLog> OccurrenceLogs { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<Schedule> Schedules { get; set; }
        public virtual DbSet<ScheduleAsset> ScheduleAssets { get; set; }
        public virtual DbSet<ScheduleAssetType> ScheduleAssetTypes { get; set; }
        public virtual DbSet<ScheduleLog> ScheduleLogs { get; set; }
        public virtual DbSet<ScheduleUser> ScheduleUsers { get; set; }
        public virtual DbSet<ScheduleUserType> ScheduleUserTypes { get; set; }
        public virtual DbSet<Task> Tasks { get; set; }
        public virtual DbSet<TaskAlert> TaskAlerts { get; set; }
        public virtual DbSet<TaskAlertLog> TaskAlertLogs { get; set; }
        public virtual DbSet<TaskAlertUser> TaskAlertUsers { get; set; }
        public virtual DbSet<TaskCategory> TaskCategories { get; set; }
        public virtual DbSet<TaskType> TaskTypes { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<UserLog> UserLogs { get; set; }
        public virtual DbSet<UserRole> UserRoles { get; set; }
        public virtual DbSet<Setting> Settings { get; set; }
    
        public virtual ObjectResult<Nullable<int>> GetTaskAlertCount(Nullable<System.DateTime> lastDate, Nullable<int> offsetPast, Nullable<int> offsetFuture)
        {
            var lastDateParameter = lastDate.HasValue ?
                new ObjectParameter("LastDate", lastDate) :
                new ObjectParameter("LastDate", typeof(System.DateTime));
    
            var offsetPastParameter = offsetPast.HasValue ?
                new ObjectParameter("OffsetPast", offsetPast) :
                new ObjectParameter("OffsetPast", typeof(int));
    
            var offsetFutureParameter = offsetFuture.HasValue ?
                new ObjectParameter("OffsetFuture", offsetFuture) :
                new ObjectParameter("OffsetFuture", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetTaskAlertCount", lastDateParameter, offsetPastParameter, offsetFutureParameter);
        }
    }
}
