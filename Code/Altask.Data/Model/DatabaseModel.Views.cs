//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Data.Entity.Infrastructure.MappingViews;

[assembly: DbMappingViewCacheTypeAttribute(
    typeof(Altask.Data.Model.AltaskEntities),
    typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySets07b895fae9236694161ed34a21a3d03387ff94afbb40627d8c912a35637ceb40))]

namespace Edm_EntityMappingGeneratedViews
{
    using System;
    using System.CodeDom.Compiler;
    using System.Data.Entity.Core.Metadata.Edm;

    /// <summary>
    /// Implements a mapping view cache.
    /// </summary>
    [GeneratedCode("Entity Framework 6 Power Tools", "0.9.2.0")]
    internal sealed class ViewsForBaseEntitySets07b895fae9236694161ed34a21a3d03387ff94afbb40627d8c912a35637ceb40 : DbMappingViewCache
    {
        /// <summary>
        /// Gets a hash value computed over the mapping closure.
        /// </summary>
        public override string MappingHashValue
        {
            get { return "07b895fae9236694161ed34a21a3d03387ff94afbb40627d8c912a35637ceb40"; }
        }

        /// <summary>
        /// Gets a view corresponding to the specified extent.
        /// </summary>
        /// <param name="extent">The extent.</param>
        /// <returns>The mapping view, or null if the extent is not associated with a mapping view.</returns>
        public override DbMappingView GetView(EntitySetBase extent)
        {
            if (extent == null)
            {
                throw new ArgumentNullException("extent");
            }

            var extentName = extent.EntityContainer.Name + "." + extent.Name;

            if (extentName == "AltaskDataModelStoreContainer.Asset")
            {
                return GetView0();
            }

            if (extentName == "AltaskDataModelStoreContainer.AssetAlert")
            {
                return GetView1();
            }

            if (extentName == "AltaskDataModelStoreContainer.AssetAlertLog")
            {
                return GetView2();
            }

            if (extentName == "AltaskDataModelStoreContainer.AssetAlertUser")
            {
                return GetView3();
            }

            if (extentName == "AltaskDataModelStoreContainer.AssetLog")
            {
                return GetView4();
            }

            if (extentName == "AltaskDataModelStoreContainer.AssetLogType")
            {
                return GetView5();
            }

            if (extentName == "AltaskDataModelStoreContainer.AssetLogTypeAsset")
            {
                return GetView6();
            }

            if (extentName == "AltaskDataModelStoreContainer.AssetLogTypeCategory")
            {
                return GetView7();
            }

            if (extentName == "AltaskDataModelStoreContainer.AssetType")
            {
                return GetView8();
            }

            if (extentName == "AltaskDataModelStoreContainer.Department")
            {
                return GetView9();
            }

            if (extentName == "AltaskDataModelStoreContainer.Form")
            {
                return GetView10();
            }

            if (extentName == "AltaskDataModelStoreContainer.FormLog")
            {
                return GetView11();
            }

            if (extentName == "AltaskDataModelStoreContainer.Manufacturer")
            {
                return GetView12();
            }

            if (extentName == "AltaskDataModelStoreContainer.Occurrence")
            {
                return GetView13();
            }

            if (extentName == "AltaskDataModelStoreContainer.OccurrenceLog")
            {
                return GetView14();
            }

            if (extentName == "AltaskDataModelStoreContainer.Role")
            {
                return GetView15();
            }

            if (extentName == "AltaskDataModelStoreContainer.Schedule")
            {
                return GetView16();
            }

            if (extentName == "AltaskDataModelStoreContainer.ScheduleAsset")
            {
                return GetView17();
            }

            if (extentName == "AltaskDataModelStoreContainer.ScheduleAssetType")
            {
                return GetView18();
            }

            if (extentName == "AltaskDataModelStoreContainer.ScheduleLog")
            {
                return GetView19();
            }

            if (extentName == "AltaskDataModelStoreContainer.ScheduleUser")
            {
                return GetView20();
            }

            if (extentName == "AltaskDataModelStoreContainer.ScheduleUserType")
            {
                return GetView21();
            }

            if (extentName == "AltaskDataModelStoreContainer.Task")
            {
                return GetView22();
            }

            if (extentName == "AltaskDataModelStoreContainer.TaskAlert")
            {
                return GetView23();
            }

            if (extentName == "AltaskDataModelStoreContainer.TaskAlertLog")
            {
                return GetView24();
            }

            if (extentName == "AltaskDataModelStoreContainer.TaskAlertUser")
            {
                return GetView25();
            }

            if (extentName == "AltaskDataModelStoreContainer.TaskCategory")
            {
                return GetView26();
            }

            if (extentName == "AltaskDataModelStoreContainer.TaskType")
            {
                return GetView27();
            }

            if (extentName == "AltaskDataModelStoreContainer.User")
            {
                return GetView28();
            }

            if (extentName == "AltaskDataModelStoreContainer.UserLog")
            {
                return GetView29();
            }

            if (extentName == "AltaskDataModelStoreContainer.UserRole")
            {
                return GetView30();
            }

            if (extentName == "AltaskEntities.Assets")
            {
                return GetView31();
            }

            if (extentName == "AltaskEntities.AssetAlerts")
            {
                return GetView32();
            }

            if (extentName == "AltaskEntities.AssetAlertLogs")
            {
                return GetView33();
            }

            if (extentName == "AltaskEntities.AssetAlertUsers")
            {
                return GetView34();
            }

            if (extentName == "AltaskEntities.AssetLogs")
            {
                return GetView35();
            }

            if (extentName == "AltaskEntities.AssetLogTypes")
            {
                return GetView36();
            }

            if (extentName == "AltaskEntities.AssetLogTypeAssets")
            {
                return GetView37();
            }

            if (extentName == "AltaskEntities.AssetLogTypeCategories")
            {
                return GetView38();
            }

            if (extentName == "AltaskEntities.AssetTypes")
            {
                return GetView39();
            }

            if (extentName == "AltaskEntities.Departments")
            {
                return GetView40();
            }

            if (extentName == "AltaskEntities.Forms")
            {
                return GetView41();
            }

            if (extentName == "AltaskEntities.FormLogs")
            {
                return GetView42();
            }

            if (extentName == "AltaskEntities.Manufacturers")
            {
                return GetView43();
            }

            if (extentName == "AltaskEntities.Occurrences")
            {
                return GetView44();
            }

            if (extentName == "AltaskEntities.OccurrenceLogs")
            {
                return GetView45();
            }

            if (extentName == "AltaskEntities.Roles")
            {
                return GetView46();
            }

            if (extentName == "AltaskEntities.Schedules")
            {
                return GetView47();
            }

            if (extentName == "AltaskEntities.ScheduleAssets")
            {
                return GetView48();
            }

            if (extentName == "AltaskEntities.ScheduleAssetTypes")
            {
                return GetView49();
            }

            if (extentName == "AltaskEntities.ScheduleLogs")
            {
                return GetView50();
            }

            if (extentName == "AltaskEntities.ScheduleUsers")
            {
                return GetView51();
            }

            if (extentName == "AltaskEntities.ScheduleUserTypes")
            {
                return GetView52();
            }

            if (extentName == "AltaskEntities.Tasks")
            {
                return GetView53();
            }

            if (extentName == "AltaskEntities.TaskAlerts")
            {
                return GetView54();
            }

            if (extentName == "AltaskEntities.TaskAlertLogs")
            {
                return GetView55();
            }

            if (extentName == "AltaskEntities.TaskAlertUsers")
            {
                return GetView56();
            }

            if (extentName == "AltaskEntities.TaskCategories")
            {
                return GetView57();
            }

            if (extentName == "AltaskEntities.TaskTypes")
            {
                return GetView58();
            }

            if (extentName == "AltaskEntities.Users")
            {
                return GetView59();
            }

            if (extentName == "AltaskEntities.UserLogs")
            {
                return GetView60();
            }

            if (extentName == "AltaskEntities.UserRoles")
            {
                return GetView61();
            }

            return null;
        }

        /// <summary>
        /// Gets the view for AltaskDataModelStoreContainer.Asset.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView0()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Asset
        [Altask.Data.Model.Store.Asset](T1.Asset_Id, T1.Asset_Active, T1.Asset_AssetTypeId, T1.Asset_CustomId, T1.Asset_Name, T1.Asset_Description, T1.Asset_DepartmentId, T1.Asset_ManufacturerId, T1.Asset_Model, T1.Asset_Serial, T1.Asset_Metadata, T1.Asset_CreatedBy, T1.Asset_CreatedOn, T1.Asset_UpdatedBy, T1.Asset_UpdatedOn)
    FROM (
        SELECT 
            T.Id AS Asset_Id, 
            T.Active AS Asset_Active, 
            T.AssetTypeId AS Asset_AssetTypeId, 
            T.CustomId AS Asset_CustomId, 
            T.Name AS Asset_Name, 
            T.Description AS Asset_Description, 
            T.DepartmentId AS Asset_DepartmentId, 
            T.ManufacturerId AS Asset_ManufacturerId, 
            T.Model AS Asset_Model, 
            T.Serial AS Asset_Serial, 
            T.Metadata AS Asset_Metadata, 
            T.CreatedBy AS Asset_CreatedBy, 
            T.CreatedOn AS Asset_CreatedOn, 
            T.UpdatedBy AS Asset_UpdatedBy, 
            T.UpdatedOn AS Asset_UpdatedOn, 
            True AS _from0
        FROM AltaskEntities.Assets AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for AltaskDataModelStoreContainer.AssetAlert.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView1()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AssetAlert
        [Altask.Data.Model.Store.AssetAlert](T1.AssetAlert_Id, T1.AssetAlert_Active, T1.AssetAlert_AssetId, T1.AssetAlert_AssetLogTypeId, T1.AssetAlert_Name, T1.AssetAlert_Metadata, T1.AssetAlert_CreatedBy, T1.AssetAlert_CreatedOn, T1.AssetAlert_UpdatedBy, T1.AssetAlert_UpdatedOn)
    FROM (
        SELECT 
            T.Id AS AssetAlert_Id, 
            T.Active AS AssetAlert_Active, 
            T.AssetId AS AssetAlert_AssetId, 
            T.AssetLogTypeId AS AssetAlert_AssetLogTypeId, 
            T.Name AS AssetAlert_Name, 
            T.Metadata AS AssetAlert_Metadata, 
            T.CreatedBy AS AssetAlert_CreatedBy, 
            T.CreatedOn AS AssetAlert_CreatedOn, 
            T.UpdatedBy AS AssetAlert_UpdatedBy, 
            T.UpdatedOn AS AssetAlert_UpdatedOn, 
            True AS _from0
        FROM AltaskEntities.AssetAlerts AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for AltaskDataModelStoreContainer.AssetAlertLog.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView2()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AssetAlertLog
        [Altask.Data.Model.Store.AssetAlertLog](T1.AssetAlertLog_Id, T1.AssetAlertLog_AssetAlertId, T1.AssetAlertLog_UserId, T1.AssetAlertLog_Type, T1.AssetAlertLog_Comment, T1.AssetAlertLog_Description, T1.AssetAlertLog_AlertDate, T1.AssetAlertLog_Metadata, T1.AssetAlertLog_CreatedBy, T1.AssetAlertLog_CreatedOn, T1.AssetAlertLog_UpdatedBy, T1.AssetAlertLog_UpdatedOn)
    FROM (
        SELECT 
            T.Id AS AssetAlertLog_Id, 
            T.AssetAlertId AS AssetAlertLog_AssetAlertId, 
            T.UserId AS AssetAlertLog_UserId, 
            T.Type AS AssetAlertLog_Type, 
            T.Comment AS AssetAlertLog_Comment, 
            T.Description AS AssetAlertLog_Description, 
            T.AlertDate AS AssetAlertLog_AlertDate, 
            T.Metadata AS AssetAlertLog_Metadata, 
            T.CreatedBy AS AssetAlertLog_CreatedBy, 
            T.CreatedOn AS AssetAlertLog_CreatedOn, 
            T.UpdatedBy AS AssetAlertLog_UpdatedBy, 
            T.UpdatedOn AS AssetAlertLog_UpdatedOn, 
            True AS _from0
        FROM AltaskEntities.AssetAlertLogs AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for AltaskDataModelStoreContainer.AssetAlertUser.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView3()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AssetAlertUser
        [Altask.Data.Model.Store.AssetAlertUser](T1.AssetAlertUser_Id, T1.AssetAlertUser_AssetAlertId, T1.AssetAlertUser_UserId, T1.AssetAlertUser_CreatedBy, T1.AssetAlertUser_CreatedOn, T1.AssetAlertUser_UpdatedBy, T1.AssetAlertUser_UpdatedOn)
    FROM (
        SELECT 
            T.Id AS AssetAlertUser_Id, 
            T.AssetAlertId AS AssetAlertUser_AssetAlertId, 
            T.UserId AS AssetAlertUser_UserId, 
            T.CreatedBy AS AssetAlertUser_CreatedBy, 
            T.CreatedOn AS AssetAlertUser_CreatedOn, 
            T.UpdatedBy AS AssetAlertUser_UpdatedBy, 
            T.UpdatedOn AS AssetAlertUser_UpdatedOn, 
            True AS _from0
        FROM AltaskEntities.AssetAlertUsers AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for AltaskDataModelStoreContainer.AssetLog.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView4()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AssetLog
        [Altask.Data.Model.Store.AssetLog](T1.AssetLog_Id, T1.AssetLog_AssetId, T1.AssetLog_AssetLogTypeId, T1.AssetLog_Comment, T1.AssetLog_Description, T1.AssetLog_Metadata, T1.AssetLog_CreatedBy, T1.AssetLog_CreatedOn, T1.AssetLog_UpdatedBy, T1.AssetLog_UpdatedOn)
    FROM (
        SELECT 
            T.Id AS AssetLog_Id, 
            T.AssetId AS AssetLog_AssetId, 
            T.AssetLogTypeId AS AssetLog_AssetLogTypeId, 
            T.Comment AS AssetLog_Comment, 
            T.Description AS AssetLog_Description, 
            T.Metadata AS AssetLog_Metadata, 
            T.CreatedBy AS AssetLog_CreatedBy, 
            T.CreatedOn AS AssetLog_CreatedOn, 
            T.UpdatedBy AS AssetLog_UpdatedBy, 
            T.UpdatedOn AS AssetLog_UpdatedOn, 
            True AS _from0
        FROM AltaskEntities.AssetLogs AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for AltaskDataModelStoreContainer.AssetLogType.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView5()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AssetLogType
        [Altask.Data.Model.Store.AssetLogType](T1.AssetLogType_Id, T1.AssetLogType_AssetLogTypeCategoryId, T1.AssetLogType_Active, T1.AssetLogType_CanComment, T1.AssetLogType_Name, T1.AssetLogType_Description, T1.AssetLogType_Value, T1.AssetLogType_System)
    FROM (
        SELECT 
            T.Id AS AssetLogType_Id, 
            T.AssetLogTypeCategoryId AS AssetLogType_AssetLogTypeCategoryId, 
            T.Active AS AssetLogType_Active, 
            T.CanComment AS AssetLogType_CanComment, 
            T.Name AS AssetLogType_Name, 
            T.Description AS AssetLogType_Description, 
            T.[Value] AS AssetLogType_Value, 
            T.System AS AssetLogType_System, 
            True AS _from0
        FROM AltaskEntities.AssetLogTypes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for AltaskDataModelStoreContainer.AssetLogTypeAsset.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView6()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AssetLogTypeAsset
        [Altask.Data.Model.Store.AssetLogTypeAsset](T1.AssetLogTypeAsset_Id, T1.AssetLogTypeAsset_AssetId, T1.AssetLogTypeAsset_AssetLogTypeId, T1.AssetLogTypeAsset_CreatedBy, T1.AssetLogTypeAsset_CreatedOn, T1.AssetLogTypeAsset_UpdatedBy, T1.AssetLogTypeAsset_UpdatedOn)
    FROM (
        SELECT 
            T.Id AS AssetLogTypeAsset_Id, 
            T.AssetId AS AssetLogTypeAsset_AssetId, 
            T.AssetLogTypeId AS AssetLogTypeAsset_AssetLogTypeId, 
            T.CreatedBy AS AssetLogTypeAsset_CreatedBy, 
            T.CreatedOn AS AssetLogTypeAsset_CreatedOn, 
            T.UpdatedBy AS AssetLogTypeAsset_UpdatedBy, 
            T.UpdatedOn AS AssetLogTypeAsset_UpdatedOn, 
            True AS _from0
        FROM AltaskEntities.AssetLogTypeAssets AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for AltaskDataModelStoreContainer.AssetLogTypeCategory.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView7()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AssetLogTypeCategory
        [Altask.Data.Model.Store.AssetLogTypeCategory](T1.AssetLogTypeCategory_Id, T1.AssetLogTypeCategory_Active, T1.AssetLogTypeCategory_Name, T1.AssetLogTypeCategory_Description, T1.AssetLogTypeCategory_Value, T1.AssetLogTypeCategory_System)
    FROM (
        SELECT 
            T.Id AS AssetLogTypeCategory_Id, 
            T.Active AS AssetLogTypeCategory_Active, 
            T.Name AS AssetLogTypeCategory_Name, 
            T.Description AS AssetLogTypeCategory_Description, 
            T.[Value] AS AssetLogTypeCategory_Value, 
            T.System AS AssetLogTypeCategory_System, 
            True AS _from0
        FROM AltaskEntities.AssetLogTypeCategories AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for AltaskDataModelStoreContainer.AssetType.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView8()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AssetType
        [Altask.Data.Model.Store.AssetType](T1.AssetType_Id, T1.AssetType_Active, T1.AssetType_Name, T1.AssetType_Description, T1.AssetType_Value, T1.AssetType_System)
    FROM (
        SELECT 
            T.Id AS AssetType_Id, 
            T.Active AS AssetType_Active, 
            T.Name AS AssetType_Name, 
            T.Description AS AssetType_Description, 
            T.[Value] AS AssetType_Value, 
            T.System AS AssetType_System, 
            True AS _from0
        FROM AltaskEntities.AssetTypes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for AltaskDataModelStoreContainer.Department.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView9()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Department
        [Altask.Data.Model.Store.Department](T1.Department_Id, T1.Department_Active, T1.Department_Name, T1.Department_Description)
    FROM (
        SELECT 
            T.Id AS Department_Id, 
            T.Active AS Department_Active, 
            T.Name AS Department_Name, 
            T.Description AS Department_Description, 
            True AS _from0
        FROM AltaskEntities.Departments AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for AltaskDataModelStoreContainer.Form.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView10()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Form
        [Altask.Data.Model.Store.Form](T1.Form_Id, T1.Form_Active, T1.Form_Name, T1.Form_Description, T1.Form_DraftModel, T1.Form_PublishedModel, T1.Form_Metadata, T1.Form_Version, T1.Form_CreatedBy, T1.Form_CreatedOn, T1.Form_UpdatedBy, T1.Form_UpdatedOn)
    FROM (
        SELECT 
            T.Id AS Form_Id, 
            T.Active AS Form_Active, 
            T.Name AS Form_Name, 
            T.Description AS Form_Description, 
            T.DraftModel AS Form_DraftModel, 
            T.PublishedModel AS Form_PublishedModel, 
            T.Metadata AS Form_Metadata, 
            T.Version AS Form_Version, 
            T.CreatedBy AS Form_CreatedBy, 
            T.CreatedOn AS Form_CreatedOn, 
            T.UpdatedBy AS Form_UpdatedBy, 
            T.UpdatedOn AS Form_UpdatedOn, 
            True AS _from0
        FROM AltaskEntities.Forms AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for AltaskDataModelStoreContainer.FormLog.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView11()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing FormLog
        [Altask.Data.Model.Store.FormLog](T1.FormLog_Id, T1.FormLog_FormId, T1.FormLog_Type, T1.FormLog_Description, T1.FormLog_BeforeModel, T1.FormLog_BeforeVersion, T1.FormLog_AfterModel, T1.FormLog_AfterVersion, T1.FormLog_CreatedBy, T1.FormLog_CreatedOn, T1.FormLog_UpdatedBy, T1.FormLog_UpdatedOn)
    FROM (
        SELECT 
            T.Id AS FormLog_Id, 
            T.FormId AS FormLog_FormId, 
            T.Type AS FormLog_Type, 
            T.Description AS FormLog_Description, 
            T.BeforeModel AS FormLog_BeforeModel, 
            T.BeforeVersion AS FormLog_BeforeVersion, 
            T.AfterModel AS FormLog_AfterModel, 
            T.AfterVersion AS FormLog_AfterVersion, 
            T.CreatedBy AS FormLog_CreatedBy, 
            T.CreatedOn AS FormLog_CreatedOn, 
            T.UpdatedBy AS FormLog_UpdatedBy, 
            T.UpdatedOn AS FormLog_UpdatedOn, 
            True AS _from0
        FROM AltaskEntities.FormLogs AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for AltaskDataModelStoreContainer.Manufacturer.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView12()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Manufacturer
        [Altask.Data.Model.Store.Manufacturer](T1.Manufacturer_Id, T1.Manufacturer_Active, T1.Manufacturer_Name, T1.Manufacturer_Description)
    FROM (
        SELECT 
            T.Id AS Manufacturer_Id, 
            T.Active AS Manufacturer_Active, 
            T.Name AS Manufacturer_Name, 
            T.Description AS Manufacturer_Description, 
            True AS _from0
        FROM AltaskEntities.Manufacturers AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for AltaskDataModelStoreContainer.Occurrence.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView13()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Occurrence
        [Altask.Data.Model.Store.Occurrence](T1.Occurrence_Id, T1.Occurrence_TaskId, T1.Occurrence_ScheduleId, T1.Occurrence_AssetId, T1.Occurrence_UserId, T1.Occurrence_FormModel, T1.Occurrence_XmlResults, T1.Occurrence_AsEarlyAsDate, T1.Occurrence_Date, T1.Occurrence_Dismissed, T1.Occurrence_DismissedBy, T1.Occurrence_DismissedOn, T1.Occurrence_Started, T1.Occurrence_StartedBy, T1.Occurrence_StartedOn, T1.Occurrence_StoppedBy, T1.Occurrence_StoppedOn, T1.Occurrence_ResumedBy, T1.Occurrence_ResumedOn, T1.Occurrence_Completed, T1.Occurrence_CompletedBy, T1.Occurrence_CompletedOn, T1.Occurrence_TimeSpent, T1.Occurrence_CreatedBy, T1.Occurrence_CreatedOn, T1.Occurrence_UpdatedBy, T1.Occurrence_UpdatedOn)
    FROM (
        SELECT 
            T.Id AS Occurrence_Id, 
            T.TaskId AS Occurrence_TaskId, 
            T.ScheduleId AS Occurrence_ScheduleId, 
            T.AssetId AS Occurrence_AssetId, 
            T.UserId AS Occurrence_UserId, 
            T.FormModel AS Occurrence_FormModel, 
            T.XmlResults AS Occurrence_XmlResults, 
            T.AsEarlyAsDate AS Occurrence_AsEarlyAsDate, 
            T.Date AS Occurrence_Date, 
            T.Dismissed AS Occurrence_Dismissed, 
            T.DismissedBy AS Occurrence_DismissedBy, 
            T.DismissedOn AS Occurrence_DismissedOn, 
            T.Started AS Occurrence_Started, 
            T.StartedBy AS Occurrence_StartedBy, 
            T.StartedOn AS Occurrence_StartedOn, 
            T.StoppedBy AS Occurrence_StoppedBy, 
            T.StoppedOn AS Occurrence_StoppedOn, 
            T.ResumedBy AS Occurrence_ResumedBy, 
            T.ResumedOn AS Occurrence_ResumedOn, 
            T.Completed AS Occurrence_Completed, 
            T.CompletedBy AS Occurrence_CompletedBy, 
            T.CompletedOn AS Occurrence_CompletedOn, 
            T.TimeSpent AS Occurrence_TimeSpent, 
            T.CreatedBy AS Occurrence_CreatedBy, 
            T.CreatedOn AS Occurrence_CreatedOn, 
            T.UpdatedBy AS Occurrence_UpdatedBy, 
            T.UpdatedOn AS Occurrence_UpdatedOn, 
            True AS _from0
        FROM AltaskEntities.Occurrences AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for AltaskDataModelStoreContainer.OccurrenceLog.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView14()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing OccurrenceLog
        [Altask.Data.Model.Store.OccurrenceLog](T1.OccurrenceLog_Id, T1.OccurrenceLog_OccurrenceId, T1.OccurrenceLog_Type, T1.OccurrenceLog_Description, T1.OccurrenceLog_JsonModel, T1.OccurrenceLog_Metadata, T1.OccurrenceLog_CreatedBy, T1.OccurrenceLog_CreatedOn, T1.OccurrenceLog_UpdatedBy, T1.OccurrenceLog_UpdatedOn)
    FROM (
        SELECT 
            T.Id AS OccurrenceLog_Id, 
            T.OccurrenceId AS OccurrenceLog_OccurrenceId, 
            T.Type AS OccurrenceLog_Type, 
            T.Description AS OccurrenceLog_Description, 
            T.JsonModel AS OccurrenceLog_JsonModel, 
            T.Metadata AS OccurrenceLog_Metadata, 
            T.CreatedBy AS OccurrenceLog_CreatedBy, 
            T.CreatedOn AS OccurrenceLog_CreatedOn, 
            T.UpdatedBy AS OccurrenceLog_UpdatedBy, 
            T.UpdatedOn AS OccurrenceLog_UpdatedOn, 
            True AS _from0
        FROM AltaskEntities.OccurrenceLogs AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for AltaskDataModelStoreContainer.Role.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView15()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Role
        [Altask.Data.Model.Store.Role](T1.Role_Id, T1.Role_Name)
    FROM (
        SELECT 
            T.Id AS Role_Id, 
            T.Name AS Role_Name, 
            True AS _from0
        FROM AltaskEntities.Roles AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for AltaskDataModelStoreContainer.Schedule.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView16()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Schedule
        [Altask.Data.Model.Store.Schedule](T1.Schedule_Id, T1.Schedule_Active, T1.Schedule_TaskId, T1.Schedule_Name, T1.Schedule_Description, T1.Schedule_Frequency, T1.Schedule_EndsAfter, T1.Schedule_EndsOn, T1.Schedule_EveryN, T1.Schedule_OnWeek, T1.Schedule_AnyTime, T1.Schedule_AsEarlyAsN, T1.Schedule_AsEarlyAsFrequency, T1.Schedule_OnMonday, T1.Schedule_OnTuesday, T1.Schedule_OnWednesday, T1.Schedule_OnThursday, T1.Schedule_OnFriday, T1.Schedule_OnSaturday, T1.Schedule_OnSunday, T1.Schedule_StartsOn, T1.Schedule_CreatedBy, T1.Schedule_CreatedOn, T1.Schedule_UpdatedBy, T1.Schedule_UpdatedOn)
    FROM (
        SELECT 
            T.Id AS Schedule_Id, 
            T.Active AS Schedule_Active, 
            T.TaskId AS Schedule_TaskId, 
            T.Name AS Schedule_Name, 
            T.Description AS Schedule_Description, 
            T.Frequency AS Schedule_Frequency, 
            T.EndsAfter AS Schedule_EndsAfter, 
            T.EndsOn AS Schedule_EndsOn, 
            T.EveryN AS Schedule_EveryN, 
            T.OnWeek AS Schedule_OnWeek, 
            T.AnyTime AS Schedule_AnyTime, 
            T.AsEarlyAsN AS Schedule_AsEarlyAsN, 
            T.AsEarlyAsFrequency AS Schedule_AsEarlyAsFrequency, 
            T.OnMonday AS Schedule_OnMonday, 
            T.OnTuesday AS Schedule_OnTuesday, 
            T.OnWednesday AS Schedule_OnWednesday, 
            T.OnThursday AS Schedule_OnThursday, 
            T.OnFriday AS Schedule_OnFriday, 
            T.OnSaturday AS Schedule_OnSaturday, 
            T.OnSunday AS Schedule_OnSunday, 
            T.StartsOn AS Schedule_StartsOn, 
            T.CreatedBy AS Schedule_CreatedBy, 
            T.CreatedOn AS Schedule_CreatedOn, 
            T.UpdatedBy AS Schedule_UpdatedBy, 
            T.UpdatedOn AS Schedule_UpdatedOn, 
            True AS _from0
        FROM AltaskEntities.Schedules AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for AltaskDataModelStoreContainer.ScheduleAsset.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView17()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ScheduleAsset
        [Altask.Data.Model.Store.ScheduleAsset](T1.ScheduleAsset_Id, T1.ScheduleAsset_ScheduleId, T1.ScheduleAsset_AssetId, T1.ScheduleAsset_ScheduleAssetTypeId, T1.ScheduleAsset_CreatedBy, T1.ScheduleAsset_CreatedOn, T1.ScheduleAsset_UpdatedBy, T1.ScheduleAsset_UpdatedOn)
    FROM (
        SELECT 
            T.Id AS ScheduleAsset_Id, 
            T.ScheduleId AS ScheduleAsset_ScheduleId, 
            T.AssetId AS ScheduleAsset_AssetId, 
            T.ScheduleAssetTypeId AS ScheduleAsset_ScheduleAssetTypeId, 
            T.CreatedBy AS ScheduleAsset_CreatedBy, 
            T.CreatedOn AS ScheduleAsset_CreatedOn, 
            T.UpdatedBy AS ScheduleAsset_UpdatedBy, 
            T.UpdatedOn AS ScheduleAsset_UpdatedOn, 
            True AS _from0
        FROM AltaskEntities.ScheduleAssets AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for AltaskDataModelStoreContainer.ScheduleAssetType.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView18()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ScheduleAssetType
        [Altask.Data.Model.Store.ScheduleAssetType](T1.ScheduleAssetType_Id, T1.ScheduleAssetType_Active, T1.ScheduleAssetType_Name, T1.ScheduleAssetType_Description, T1.ScheduleAssetType_Value, T1.ScheduleAssetType_System)
    FROM (
        SELECT 
            T.Id AS ScheduleAssetType_Id, 
            T.Active AS ScheduleAssetType_Active, 
            T.Name AS ScheduleAssetType_Name, 
            T.Description AS ScheduleAssetType_Description, 
            T.[Value] AS ScheduleAssetType_Value, 
            T.System AS ScheduleAssetType_System, 
            True AS _from0
        FROM AltaskEntities.ScheduleAssetTypes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for AltaskDataModelStoreContainer.ScheduleLog.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView19()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ScheduleLog
        [Altask.Data.Model.Store.ScheduleLog](T1.ScheduleLog_Id, T1.ScheduleLog_ScheduleId, T1.ScheduleLog_Type, T1.ScheduleLog_Description, T1.ScheduleLog_SnapShot, T1.ScheduleLog_Metadata, T1.ScheduleLog_CreatedBy, T1.ScheduleLog_CreatedOn, T1.ScheduleLog_UpdatedBy, T1.ScheduleLog_UpdatedOn)
    FROM (
        SELECT 
            T.Id AS ScheduleLog_Id, 
            T.ScheduleId AS ScheduleLog_ScheduleId, 
            T.Type AS ScheduleLog_Type, 
            T.Description AS ScheduleLog_Description, 
            T.SnapShot AS ScheduleLog_SnapShot, 
            T.Metadata AS ScheduleLog_Metadata, 
            T.CreatedBy AS ScheduleLog_CreatedBy, 
            T.CreatedOn AS ScheduleLog_CreatedOn, 
            T.UpdatedBy AS ScheduleLog_UpdatedBy, 
            T.UpdatedOn AS ScheduleLog_UpdatedOn, 
            True AS _from0
        FROM AltaskEntities.ScheduleLogs AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for AltaskDataModelStoreContainer.ScheduleUser.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView20()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ScheduleUser
        [Altask.Data.Model.Store.ScheduleUser](T1.ScheduleUser_Id, T1.ScheduleUser_ScheduleId, T1.ScheduleUser_UserId, T1.ScheduleUser_ScheduleUserTypeId, T1.ScheduleUser_CreatedBy, T1.ScheduleUser_CreatedOn, T1.ScheduleUser_UpdatedBy, T1.ScheduleUser_UpdatedOn)
    FROM (
        SELECT 
            T.Id AS ScheduleUser_Id, 
            T.ScheduleId AS ScheduleUser_ScheduleId, 
            T.UserId AS ScheduleUser_UserId, 
            T.ScheduleUserTypeId AS ScheduleUser_ScheduleUserTypeId, 
            T.CreatedBy AS ScheduleUser_CreatedBy, 
            T.CreatedOn AS ScheduleUser_CreatedOn, 
            T.UpdatedBy AS ScheduleUser_UpdatedBy, 
            T.UpdatedOn AS ScheduleUser_UpdatedOn, 
            True AS _from0
        FROM AltaskEntities.ScheduleUsers AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for AltaskDataModelStoreContainer.ScheduleUserType.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView21()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ScheduleUserType
        [Altask.Data.Model.Store.ScheduleUserType](T1.ScheduleUserType_Id, T1.ScheduleUserType_Active, T1.ScheduleUserType_Name, T1.ScheduleUserType_Description, T1.ScheduleUserType_Value, T1.ScheduleUserType_System)
    FROM (
        SELECT 
            T.Id AS ScheduleUserType_Id, 
            T.Active AS ScheduleUserType_Active, 
            T.Name AS ScheduleUserType_Name, 
            T.Description AS ScheduleUserType_Description, 
            T.[Value] AS ScheduleUserType_Value, 
            T.System AS ScheduleUserType_System, 
            True AS _from0
        FROM AltaskEntities.ScheduleUserTypes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for AltaskDataModelStoreContainer.Task.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView22()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Task
        [Altask.Data.Model.Store.Task](T1.Task_Id, T1.Task_Active, T1.Task_TaskTypeId, T1.Task_TaskCategoryId, T1.Task_FormId, T1.Task_Name, T1.Task_Description, T1.Task_Sequence, T1.Task_Metadata, T1.Task_CreatedBy, T1.Task_CreatedOn, T1.Task_UpdatedBy, T1.Task_UpdatedOn)
    FROM (
        SELECT 
            T.Id AS Task_Id, 
            T.Active AS Task_Active, 
            T.TaskTypeId AS Task_TaskTypeId, 
            T.TaskCategoryId AS Task_TaskCategoryId, 
            T.FormId AS Task_FormId, 
            T.Name AS Task_Name, 
            T.Description AS Task_Description, 
            T.Sequence AS Task_Sequence, 
            T.Metadata AS Task_Metadata, 
            T.CreatedBy AS Task_CreatedBy, 
            T.CreatedOn AS Task_CreatedOn, 
            T.UpdatedBy AS Task_UpdatedBy, 
            T.UpdatedOn AS Task_UpdatedOn, 
            True AS _from0
        FROM AltaskEntities.Tasks AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for AltaskDataModelStoreContainer.TaskAlert.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView23()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing TaskAlert
        [Altask.Data.Model.Store.TaskAlert](T1.TaskAlert_Id, T1.TaskAlert_Active, T1.TaskAlert_TaskId, T1.TaskAlert_Name, T1.TaskAlert_TimeN, T1.TaskAlert_TimeUnit, T1.TaskAlert_When, T1.TaskAlert_IfNot, T1.TaskAlert_IfStatus, T1.TaskAlert_Metadata, T1.TaskAlert_CreatedBy, T1.TaskAlert_CreatedOn, T1.TaskAlert_UpdatedBy, T1.TaskAlert_UpdatedOn)
    FROM (
        SELECT 
            T.Id AS TaskAlert_Id, 
            T.Active AS TaskAlert_Active, 
            T.TaskId AS TaskAlert_TaskId, 
            T.Name AS TaskAlert_Name, 
            T.TimeN AS TaskAlert_TimeN, 
            T.TimeUnit AS TaskAlert_TimeUnit, 
            T.[When] AS TaskAlert_When, 
            T.IfNot AS TaskAlert_IfNot, 
            T.IfStatus AS TaskAlert_IfStatus, 
            T.Metadata AS TaskAlert_Metadata, 
            T.CreatedBy AS TaskAlert_CreatedBy, 
            T.CreatedOn AS TaskAlert_CreatedOn, 
            T.UpdatedBy AS TaskAlert_UpdatedBy, 
            T.UpdatedOn AS TaskAlert_UpdatedOn, 
            True AS _from0
        FROM AltaskEntities.TaskAlerts AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for AltaskDataModelStoreContainer.TaskAlertLog.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView24()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing TaskAlertLog
        [Altask.Data.Model.Store.TaskAlertLog](T1.TaskAlertLog_Id, T1.TaskAlertLog_TaskAlertId, T1.TaskAlertLog_UserId, T1.TaskAlertLog_Type, T1.TaskAlertLog_Description, T1.TaskAlertLog_AlertDate, T1.TaskAlertLog_Metadata, T1.TaskAlertLog_CreatedBy, T1.TaskAlertLog_CreatedOn, T1.TaskAlertLog_UpdatedBy, T1.TaskAlertLog_UpdatedOn)
    FROM (
        SELECT 
            T.Id AS TaskAlertLog_Id, 
            T.TaskAlertId AS TaskAlertLog_TaskAlertId, 
            T.UserId AS TaskAlertLog_UserId, 
            T.Type AS TaskAlertLog_Type, 
            T.Description AS TaskAlertLog_Description, 
            T.AlertDate AS TaskAlertLog_AlertDate, 
            T.Metadata AS TaskAlertLog_Metadata, 
            T.CreatedBy AS TaskAlertLog_CreatedBy, 
            T.CreatedOn AS TaskAlertLog_CreatedOn, 
            T.UpdatedBy AS TaskAlertLog_UpdatedBy, 
            T.UpdatedOn AS TaskAlertLog_UpdatedOn, 
            True AS _from0
        FROM AltaskEntities.TaskAlertLogs AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for AltaskDataModelStoreContainer.TaskAlertUser.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView25()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing TaskAlertUser
        [Altask.Data.Model.Store.TaskAlertUser](T1.TaskAlertUser_Id, T1.TaskAlertUser_TaskAlertId, T1.TaskAlertUser_UserId, T1.TaskAlertUser_CreatedBy, T1.TaskAlertUser_CreatedOn, T1.TaskAlertUser_UpdatedBy, T1.TaskAlertUser_UpdatedOn)
    FROM (
        SELECT 
            T.Id AS TaskAlertUser_Id, 
            T.TaskAlertId AS TaskAlertUser_TaskAlertId, 
            T.UserId AS TaskAlertUser_UserId, 
            T.CreatedBy AS TaskAlertUser_CreatedBy, 
            T.CreatedOn AS TaskAlertUser_CreatedOn, 
            T.UpdatedBy AS TaskAlertUser_UpdatedBy, 
            T.UpdatedOn AS TaskAlertUser_UpdatedOn, 
            True AS _from0
        FROM AltaskEntities.TaskAlertUsers AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for AltaskDataModelStoreContainer.TaskCategory.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView26()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing TaskCategory
        [Altask.Data.Model.Store.TaskCategory](T1.TaskCategory_Id, T1.TaskCategory_Active, T1.TaskCategory_Name, T1.TaskCategory_Description, T1.TaskCategory_Value, T1.TaskCategory_System)
    FROM (
        SELECT 
            T.Id AS TaskCategory_Id, 
            T.Active AS TaskCategory_Active, 
            T.Name AS TaskCategory_Name, 
            T.Description AS TaskCategory_Description, 
            T.[Value] AS TaskCategory_Value, 
            T.System AS TaskCategory_System, 
            True AS _from0
        FROM AltaskEntities.TaskCategories AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for AltaskDataModelStoreContainer.TaskType.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView27()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing TaskType
        [Altask.Data.Model.Store.TaskType](T1.TaskType_Id, T1.TaskType_Active, T1.TaskType_Name, T1.TaskType_Description, T1.TaskType_IsSchedulable, T1.TaskType_Value, T1.TaskType_System)
    FROM (
        SELECT 
            T.Id AS TaskType_Id, 
            T.Active AS TaskType_Active, 
            T.Name AS TaskType_Name, 
            T.Description AS TaskType_Description, 
            T.IsSchedulable AS TaskType_IsSchedulable, 
            T.[Value] AS TaskType_Value, 
            T.System AS TaskType_System, 
            True AS _from0
        FROM AltaskEntities.TaskTypes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for AltaskDataModelStoreContainer.User.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView28()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing User
        [Altask.Data.Model.Store.User](T1.User_Id, T1.User_Active, T1.User_UserName, T1.User_FullName, T1.User_EmailAddress, T1.User_SmsAddress, T1.User_Metadata, T1.User_Settings, T1.User_MobilePhone, T1.User_ReceiveEmail, T1.User_ReceiveText, T1.User_PasswordHash, T1.User_SecurityStamp, T1.User_CreatedBy, T1.User_CreatedOn, T1.User_UpdatedBy, T1.User_UpdatedOn)
    FROM (
        SELECT 
            T.Id AS User_Id, 
            T.Active AS User_Active, 
            T.UserName AS User_UserName, 
            T.FullName AS User_FullName, 
            T.EmailAddress AS User_EmailAddress, 
            T.SmsAddress AS User_SmsAddress, 
            T.Metadata AS User_Metadata, 
            T.Settings AS User_Settings, 
            T.MobilePhone AS User_MobilePhone, 
            T.ReceiveEmail AS User_ReceiveEmail, 
            T.ReceiveText AS User_ReceiveText, 
            T.PasswordHash AS User_PasswordHash, 
            T.SecurityStamp AS User_SecurityStamp, 
            T.CreatedBy AS User_CreatedBy, 
            T.CreatedOn AS User_CreatedOn, 
            T.UpdatedBy AS User_UpdatedBy, 
            T.UpdatedOn AS User_UpdatedOn, 
            True AS _from0
        FROM AltaskEntities.Users AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for AltaskDataModelStoreContainer.UserLog.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView29()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing UserLog
        [Altask.Data.Model.Store.UserLog](T1.UserLog_Id, T1.UserLog_UserId, T1.UserLog_Type, T1.UserLog_Description, T1.UserLog_Metadata, T1.UserLog_CreatedBy, T1.UserLog_CreatedOn, T1.UserLog_UpdatedBy, T1.UserLog_UpdatedOn)
    FROM (
        SELECT 
            T.Id AS UserLog_Id, 
            T.UserId AS UserLog_UserId, 
            T.Type AS UserLog_Type, 
            T.Description AS UserLog_Description, 
            T.Metadata AS UserLog_Metadata, 
            T.CreatedBy AS UserLog_CreatedBy, 
            T.CreatedOn AS UserLog_CreatedOn, 
            T.UpdatedBy AS UserLog_UpdatedBy, 
            T.UpdatedOn AS UserLog_UpdatedOn, 
            True AS _from0
        FROM AltaskEntities.UserLogs AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for AltaskDataModelStoreContainer.UserRole.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView30()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing UserRole
        [Altask.Data.Model.Store.UserRole](T1.UserRole_Id, T1.UserRole_UserId, T1.UserRole_RoleId, T1.UserRole_Name, T1.UserRole_CreatedBy, T1.UserRole_CreatedOn, T1.UserRole_UpdatedBy, T1.UserRole_UpdatedOn)
    FROM (
        SELECT 
            T.Id AS UserRole_Id, 
            T.UserId AS UserRole_UserId, 
            T.RoleId AS UserRole_RoleId, 
            T.Name AS UserRole_Name, 
            T.CreatedBy AS UserRole_CreatedBy, 
            T.CreatedOn AS UserRole_CreatedOn, 
            T.UpdatedBy AS UserRole_UpdatedBy, 
            T.UpdatedOn AS UserRole_UpdatedOn, 
            True AS _from0
        FROM AltaskEntities.UserRoles AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for AltaskEntities.Assets.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView31()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Assets
        [Altask.Data.Model.Asset](T1.Asset_Id, T1.Asset_Active, T1.Asset_AssetTypeId, T1.Asset_CustomId, T1.Asset_Name, T1.Asset_Description, T1.Asset_DepartmentId, T1.Asset_ManufacturerId, T1.Asset_Model, T1.Asset_Serial, T1.Asset_Metadata, T1.Asset_CreatedBy, T1.Asset_CreatedOn, T1.Asset_UpdatedBy, T1.Asset_UpdatedOn)
    FROM (
        SELECT 
            T.Id AS Asset_Id, 
            T.Active AS Asset_Active, 
            T.AssetTypeId AS Asset_AssetTypeId, 
            T.CustomId AS Asset_CustomId, 
            T.Name AS Asset_Name, 
            T.Description AS Asset_Description, 
            T.DepartmentId AS Asset_DepartmentId, 
            T.ManufacturerId AS Asset_ManufacturerId, 
            T.Model AS Asset_Model, 
            T.Serial AS Asset_Serial, 
            T.Metadata AS Asset_Metadata, 
            T.CreatedBy AS Asset_CreatedBy, 
            T.CreatedOn AS Asset_CreatedOn, 
            T.UpdatedBy AS Asset_UpdatedBy, 
            T.UpdatedOn AS Asset_UpdatedOn, 
            True AS _from0
        FROM AltaskDataModelStoreContainer.Asset AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for AltaskEntities.AssetAlerts.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView32()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AssetAlerts
        [Altask.Data.Model.AssetAlert](T1.AssetAlert_Id, T1.AssetAlert_Active, T1.AssetAlert_AssetId, T1.AssetAlert_AssetLogTypeId, T1.AssetAlert_Name, T1.AssetAlert_Metadata, T1.AssetAlert_CreatedBy, T1.AssetAlert_CreatedOn, T1.AssetAlert_UpdatedBy, T1.AssetAlert_UpdatedOn)
    FROM (
        SELECT 
            T.Id AS AssetAlert_Id, 
            T.Active AS AssetAlert_Active, 
            T.AssetId AS AssetAlert_AssetId, 
            T.AssetLogTypeId AS AssetAlert_AssetLogTypeId, 
            T.Name AS AssetAlert_Name, 
            T.Metadata AS AssetAlert_Metadata, 
            T.CreatedBy AS AssetAlert_CreatedBy, 
            T.CreatedOn AS AssetAlert_CreatedOn, 
            T.UpdatedBy AS AssetAlert_UpdatedBy, 
            T.UpdatedOn AS AssetAlert_UpdatedOn, 
            True AS _from0
        FROM AltaskDataModelStoreContainer.AssetAlert AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for AltaskEntities.AssetAlertLogs.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView33()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AssetAlertLogs
        [Altask.Data.Model.AssetAlertLog](T1.AssetAlertLog_Id, T1.AssetAlertLog_AssetAlertId, T1.AssetAlertLog_UserId, T1.AssetAlertLog_Type, T1.AssetAlertLog_Description, T1.AssetAlertLog_AlertDate, T1.AssetAlertLog_Metadata, T1.AssetAlertLog_CreatedBy, T1.AssetAlertLog_CreatedOn, T1.AssetAlertLog_UpdatedBy, T1.AssetAlertLog_UpdatedOn, T1.AssetAlertLog_Comment)
    FROM (
        SELECT 
            T.Id AS AssetAlertLog_Id, 
            T.AssetAlertId AS AssetAlertLog_AssetAlertId, 
            T.UserId AS AssetAlertLog_UserId, 
            T.Type AS AssetAlertLog_Type, 
            T.Description AS AssetAlertLog_Description, 
            T.AlertDate AS AssetAlertLog_AlertDate, 
            T.Metadata AS AssetAlertLog_Metadata, 
            T.CreatedBy AS AssetAlertLog_CreatedBy, 
            T.CreatedOn AS AssetAlertLog_CreatedOn, 
            T.UpdatedBy AS AssetAlertLog_UpdatedBy, 
            T.UpdatedOn AS AssetAlertLog_UpdatedOn, 
            T.Comment AS AssetAlertLog_Comment, 
            True AS _from0
        FROM AltaskDataModelStoreContainer.AssetAlertLog AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for AltaskEntities.AssetAlertUsers.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView34()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AssetAlertUsers
        [Altask.Data.Model.AssetAlertUser](T1.AssetAlertUser_Id, T1.AssetAlertUser_AssetAlertId, T1.AssetAlertUser_UserId, T1.AssetAlertUser_CreatedBy, T1.AssetAlertUser_CreatedOn, T1.AssetAlertUser_UpdatedBy, T1.AssetAlertUser_UpdatedOn)
    FROM (
        SELECT 
            T.Id AS AssetAlertUser_Id, 
            T.AssetAlertId AS AssetAlertUser_AssetAlertId, 
            T.UserId AS AssetAlertUser_UserId, 
            T.CreatedBy AS AssetAlertUser_CreatedBy, 
            T.CreatedOn AS AssetAlertUser_CreatedOn, 
            T.UpdatedBy AS AssetAlertUser_UpdatedBy, 
            T.UpdatedOn AS AssetAlertUser_UpdatedOn, 
            True AS _from0
        FROM AltaskDataModelStoreContainer.AssetAlertUser AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for AltaskEntities.AssetLogs.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView35()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AssetLogs
        [Altask.Data.Model.AssetLog](T1.AssetLog_Id, T1.AssetLog_AssetId, T1.AssetLog_AssetLogTypeId, T1.AssetLog_Description, T1.AssetLog_Metadata, T1.AssetLog_CreatedBy, T1.AssetLog_CreatedOn, T1.AssetLog_UpdatedBy, T1.AssetLog_UpdatedOn, T1.AssetLog_Comment)
    FROM (
        SELECT 
            T.Id AS AssetLog_Id, 
            T.AssetId AS AssetLog_AssetId, 
            T.AssetLogTypeId AS AssetLog_AssetLogTypeId, 
            T.Description AS AssetLog_Description, 
            T.Metadata AS AssetLog_Metadata, 
            T.CreatedBy AS AssetLog_CreatedBy, 
            T.CreatedOn AS AssetLog_CreatedOn, 
            T.UpdatedBy AS AssetLog_UpdatedBy, 
            T.UpdatedOn AS AssetLog_UpdatedOn, 
            T.Comment AS AssetLog_Comment, 
            True AS _from0
        FROM AltaskDataModelStoreContainer.AssetLog AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for AltaskEntities.AssetLogTypes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView36()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AssetLogTypes
        [Altask.Data.Model.AssetLogType](T1.AssetLogType_Id, T1.AssetLogType_AssetLogTypeCategoryId, T1.AssetLogType_Active, T1.AssetLogType_Name, T1.AssetLogType_Description, T1.AssetLogType_Value, T1.AssetLogType_System, T1.AssetLogType_CanComment)
    FROM (
        SELECT 
            T.Id AS AssetLogType_Id, 
            T.AssetLogTypeCategoryId AS AssetLogType_AssetLogTypeCategoryId, 
            T.Active AS AssetLogType_Active, 
            T.Name AS AssetLogType_Name, 
            T.Description AS AssetLogType_Description, 
            T.[Value] AS AssetLogType_Value, 
            T.System AS AssetLogType_System, 
            T.CanComment AS AssetLogType_CanComment, 
            True AS _from0
        FROM AltaskDataModelStoreContainer.AssetLogType AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for AltaskEntities.AssetLogTypeAssets.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView37()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AssetLogTypeAssets
        [Altask.Data.Model.AssetLogTypeAsset](T1.AssetLogTypeAsset_Id, T1.AssetLogTypeAsset_AssetId, T1.AssetLogTypeAsset_AssetLogTypeId, T1.AssetLogTypeAsset_CreatedBy, T1.AssetLogTypeAsset_CreatedOn, T1.AssetLogTypeAsset_UpdatedBy, T1.AssetLogTypeAsset_UpdatedOn)
    FROM (
        SELECT 
            T.Id AS AssetLogTypeAsset_Id, 
            T.AssetId AS AssetLogTypeAsset_AssetId, 
            T.AssetLogTypeId AS AssetLogTypeAsset_AssetLogTypeId, 
            T.CreatedBy AS AssetLogTypeAsset_CreatedBy, 
            T.CreatedOn AS AssetLogTypeAsset_CreatedOn, 
            T.UpdatedBy AS AssetLogTypeAsset_UpdatedBy, 
            T.UpdatedOn AS AssetLogTypeAsset_UpdatedOn, 
            True AS _from0
        FROM AltaskDataModelStoreContainer.AssetLogTypeAsset AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for AltaskEntities.AssetLogTypeCategories.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView38()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AssetLogTypeCategories
        [Altask.Data.Model.AssetLogTypeCategory](T1.AssetLogTypeCategory_Id, T1.AssetLogTypeCategory_Active, T1.AssetLogTypeCategory_Name, T1.AssetLogTypeCategory_Description, T1.AssetLogTypeCategory_Value, T1.AssetLogTypeCategory_System)
    FROM (
        SELECT 
            T.Id AS AssetLogTypeCategory_Id, 
            T.Active AS AssetLogTypeCategory_Active, 
            T.Name AS AssetLogTypeCategory_Name, 
            T.Description AS AssetLogTypeCategory_Description, 
            T.[Value] AS AssetLogTypeCategory_Value, 
            T.System AS AssetLogTypeCategory_System, 
            True AS _from0
        FROM AltaskDataModelStoreContainer.AssetLogTypeCategory AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for AltaskEntities.AssetTypes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView39()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing AssetTypes
        [Altask.Data.Model.AssetType](T1.AssetType_Id, T1.AssetType_Active, T1.AssetType_Name, T1.AssetType_Description, T1.AssetType_Value, T1.AssetType_System)
    FROM (
        SELECT 
            T.Id AS AssetType_Id, 
            T.Active AS AssetType_Active, 
            T.Name AS AssetType_Name, 
            T.Description AS AssetType_Description, 
            T.[Value] AS AssetType_Value, 
            T.System AS AssetType_System, 
            True AS _from0
        FROM AltaskDataModelStoreContainer.AssetType AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for AltaskEntities.Departments.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView40()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Departments
        [Altask.Data.Model.Department](T1.Department_Id, T1.Department_Active, T1.Department_Name, T1.Department_Description)
    FROM (
        SELECT 
            T.Id AS Department_Id, 
            T.Active AS Department_Active, 
            T.Name AS Department_Name, 
            T.Description AS Department_Description, 
            True AS _from0
        FROM AltaskDataModelStoreContainer.Department AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for AltaskEntities.Forms.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView41()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Forms
        [Altask.Data.Model.Form](T1.Form_Id, T1.Form_Active, T1.Form_Name, T1.Form_Description, T1.Form_DraftModel, T1.Form_PublishedModel, T1.Form_Metadata, T1.Form_Version, T1.Form_CreatedBy, T1.Form_CreatedOn, T1.Form_UpdatedBy, T1.Form_UpdatedOn)
    FROM (
        SELECT 
            T.Id AS Form_Id, 
            T.Active AS Form_Active, 
            T.Name AS Form_Name, 
            T.Description AS Form_Description, 
            T.DraftModel AS Form_DraftModel, 
            T.PublishedModel AS Form_PublishedModel, 
            T.Metadata AS Form_Metadata, 
            T.Version AS Form_Version, 
            T.CreatedBy AS Form_CreatedBy, 
            T.CreatedOn AS Form_CreatedOn, 
            T.UpdatedBy AS Form_UpdatedBy, 
            T.UpdatedOn AS Form_UpdatedOn, 
            True AS _from0
        FROM AltaskDataModelStoreContainer.Form AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for AltaskEntities.FormLogs.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView42()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing FormLogs
        [Altask.Data.Model.FormLog](T1.FormLog_Id, T1.FormLog_FormId, T1.FormLog_Type, T1.FormLog_Description, T1.FormLog_BeforeModel, T1.FormLog_BeforeVersion, T1.FormLog_AfterModel, T1.FormLog_AfterVersion, T1.FormLog_CreatedBy, T1.FormLog_CreatedOn, T1.FormLog_UpdatedBy, T1.FormLog_UpdatedOn)
    FROM (
        SELECT 
            T.Id AS FormLog_Id, 
            T.FormId AS FormLog_FormId, 
            T.Type AS FormLog_Type, 
            T.Description AS FormLog_Description, 
            T.BeforeModel AS FormLog_BeforeModel, 
            T.BeforeVersion AS FormLog_BeforeVersion, 
            T.AfterModel AS FormLog_AfterModel, 
            T.AfterVersion AS FormLog_AfterVersion, 
            T.CreatedBy AS FormLog_CreatedBy, 
            T.CreatedOn AS FormLog_CreatedOn, 
            T.UpdatedBy AS FormLog_UpdatedBy, 
            T.UpdatedOn AS FormLog_UpdatedOn, 
            True AS _from0
        FROM AltaskDataModelStoreContainer.FormLog AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for AltaskEntities.Manufacturers.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView43()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Manufacturers
        [Altask.Data.Model.Manufacturer](T1.Manufacturer_Id, T1.Manufacturer_Active, T1.Manufacturer_Name, T1.Manufacturer_Description)
    FROM (
        SELECT 
            T.Id AS Manufacturer_Id, 
            T.Active AS Manufacturer_Active, 
            T.Name AS Manufacturer_Name, 
            T.Description AS Manufacturer_Description, 
            True AS _from0
        FROM AltaskDataModelStoreContainer.Manufacturer AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for AltaskEntities.Occurrences.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView44()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Occurrences
        [Altask.Data.Model.Occurrence](T1.Occurrence_Id, T1.Occurrence_TaskId, T1.Occurrence_ScheduleId, T1.Occurrence_AssetId, T1.Occurrence_UserId, T1.Occurrence_FormModel, T1.Occurrence_XmlResults, T1.Occurrence_AsEarlyAsDate, T1.Occurrence_Date, T1.Occurrence_Dismissed, T1.Occurrence_DismissedBy, T1.Occurrence_DismissedOn, T1.Occurrence_Started, T1.Occurrence_StartedBy, T1.Occurrence_StartedOn, T1.Occurrence_StoppedBy, T1.Occurrence_StoppedOn, T1.Occurrence_ResumedBy, T1.Occurrence_ResumedOn, T1.Occurrence_Completed, T1.Occurrence_CompletedBy, T1.Occurrence_CompletedOn, T1.Occurrence_TimeSpent, T1.Occurrence_CreatedBy, T1.Occurrence_CreatedOn, T1.Occurrence_UpdatedBy, T1.Occurrence_UpdatedOn)
    FROM (
        SELECT 
            T.Id AS Occurrence_Id, 
            T.TaskId AS Occurrence_TaskId, 
            T.ScheduleId AS Occurrence_ScheduleId, 
            T.AssetId AS Occurrence_AssetId, 
            T.UserId AS Occurrence_UserId, 
            T.FormModel AS Occurrence_FormModel, 
            T.XmlResults AS Occurrence_XmlResults, 
            T.AsEarlyAsDate AS Occurrence_AsEarlyAsDate, 
            T.Date AS Occurrence_Date, 
            T.Dismissed AS Occurrence_Dismissed, 
            T.DismissedBy AS Occurrence_DismissedBy, 
            T.DismissedOn AS Occurrence_DismissedOn, 
            T.Started AS Occurrence_Started, 
            T.StartedBy AS Occurrence_StartedBy, 
            T.StartedOn AS Occurrence_StartedOn, 
            T.StoppedBy AS Occurrence_StoppedBy, 
            T.StoppedOn AS Occurrence_StoppedOn, 
            T.ResumedBy AS Occurrence_ResumedBy, 
            T.ResumedOn AS Occurrence_ResumedOn, 
            T.Completed AS Occurrence_Completed, 
            T.CompletedBy AS Occurrence_CompletedBy, 
            T.CompletedOn AS Occurrence_CompletedOn, 
            T.TimeSpent AS Occurrence_TimeSpent, 
            T.CreatedBy AS Occurrence_CreatedBy, 
            T.CreatedOn AS Occurrence_CreatedOn, 
            T.UpdatedBy AS Occurrence_UpdatedBy, 
            T.UpdatedOn AS Occurrence_UpdatedOn, 
            True AS _from0
        FROM AltaskDataModelStoreContainer.Occurrence AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for AltaskEntities.OccurrenceLogs.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView45()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing OccurrenceLogs
        [Altask.Data.Model.OccurrenceLog](T1.OccurrenceLog_Id, T1.OccurrenceLog_OccurrenceId, T1.OccurrenceLog_Type, T1.OccurrenceLog_Description, T1.OccurrenceLog_JsonModel, T1.OccurrenceLog_Metadata, T1.OccurrenceLog_CreatedBy, T1.OccurrenceLog_CreatedOn, T1.OccurrenceLog_UpdatedBy, T1.OccurrenceLog_UpdatedOn)
    FROM (
        SELECT 
            T.Id AS OccurrenceLog_Id, 
            T.OccurrenceId AS OccurrenceLog_OccurrenceId, 
            T.Type AS OccurrenceLog_Type, 
            T.Description AS OccurrenceLog_Description, 
            T.JsonModel AS OccurrenceLog_JsonModel, 
            T.Metadata AS OccurrenceLog_Metadata, 
            T.CreatedBy AS OccurrenceLog_CreatedBy, 
            T.CreatedOn AS OccurrenceLog_CreatedOn, 
            T.UpdatedBy AS OccurrenceLog_UpdatedBy, 
            T.UpdatedOn AS OccurrenceLog_UpdatedOn, 
            True AS _from0
        FROM AltaskDataModelStoreContainer.OccurrenceLog AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for AltaskEntities.Roles.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView46()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Roles
        [Altask.Data.Model.Role](T1.Role_Id, T1.Role_Name)
    FROM (
        SELECT 
            T.Id AS Role_Id, 
            T.Name AS Role_Name, 
            True AS _from0
        FROM AltaskDataModelStoreContainer.Role AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for AltaskEntities.Schedules.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView47()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Schedules
        [Altask.Data.Model.Schedule](T1.Schedule_Id, T1.Schedule_Active, T1.Schedule_TaskId, T1.Schedule_Name, T1.Schedule_Description, T1.Schedule_Frequency, T1.Schedule_EndsAfter, T1.Schedule_EndsOn, T1.Schedule_EveryN, T1.Schedule_OnWeek, T1.Schedule_AnyTime, T1.Schedule_AsEarlyAsN, T1.Schedule_AsEarlyAsFrequency, T1.Schedule_OnMonday, T1.Schedule_OnTuesday, T1.Schedule_OnWednesday, T1.Schedule_OnThursday, T1.Schedule_OnFriday, T1.Schedule_OnSaturday, T1.Schedule_OnSunday, T1.Schedule_StartsOn, T1.Schedule_CreatedBy, T1.Schedule_CreatedOn, T1.Schedule_UpdatedBy, T1.Schedule_UpdatedOn)
    FROM (
        SELECT 
            T.Id AS Schedule_Id, 
            T.Active AS Schedule_Active, 
            T.TaskId AS Schedule_TaskId, 
            T.Name AS Schedule_Name, 
            T.Description AS Schedule_Description, 
            T.Frequency AS Schedule_Frequency, 
            T.EndsAfter AS Schedule_EndsAfter, 
            T.EndsOn AS Schedule_EndsOn, 
            T.EveryN AS Schedule_EveryN, 
            T.OnWeek AS Schedule_OnWeek, 
            T.AnyTime AS Schedule_AnyTime, 
            T.AsEarlyAsN AS Schedule_AsEarlyAsN, 
            T.AsEarlyAsFrequency AS Schedule_AsEarlyAsFrequency, 
            T.OnMonday AS Schedule_OnMonday, 
            T.OnTuesday AS Schedule_OnTuesday, 
            T.OnWednesday AS Schedule_OnWednesday, 
            T.OnThursday AS Schedule_OnThursday, 
            T.OnFriday AS Schedule_OnFriday, 
            T.OnSaturday AS Schedule_OnSaturday, 
            T.OnSunday AS Schedule_OnSunday, 
            T.StartsOn AS Schedule_StartsOn, 
            T.CreatedBy AS Schedule_CreatedBy, 
            T.CreatedOn AS Schedule_CreatedOn, 
            T.UpdatedBy AS Schedule_UpdatedBy, 
            T.UpdatedOn AS Schedule_UpdatedOn, 
            True AS _from0
        FROM AltaskDataModelStoreContainer.Schedule AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for AltaskEntities.ScheduleAssets.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView48()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ScheduleAssets
        [Altask.Data.Model.ScheduleAsset](T1.ScheduleAsset_Id, T1.ScheduleAsset_ScheduleId, T1.ScheduleAsset_AssetId, T1.ScheduleAsset_ScheduleAssetTypeId, T1.ScheduleAsset_CreatedBy, T1.ScheduleAsset_CreatedOn, T1.ScheduleAsset_UpdatedBy, T1.ScheduleAsset_UpdatedOn)
    FROM (
        SELECT 
            T.Id AS ScheduleAsset_Id, 
            T.ScheduleId AS ScheduleAsset_ScheduleId, 
            T.AssetId AS ScheduleAsset_AssetId, 
            T.ScheduleAssetTypeId AS ScheduleAsset_ScheduleAssetTypeId, 
            T.CreatedBy AS ScheduleAsset_CreatedBy, 
            T.CreatedOn AS ScheduleAsset_CreatedOn, 
            T.UpdatedBy AS ScheduleAsset_UpdatedBy, 
            T.UpdatedOn AS ScheduleAsset_UpdatedOn, 
            True AS _from0
        FROM AltaskDataModelStoreContainer.ScheduleAsset AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for AltaskEntities.ScheduleAssetTypes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView49()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ScheduleAssetTypes
        [Altask.Data.Model.ScheduleAssetType](T1.ScheduleAssetType_Id, T1.ScheduleAssetType_Active, T1.ScheduleAssetType_Name, T1.ScheduleAssetType_Description, T1.ScheduleAssetType_Value, T1.ScheduleAssetType_System)
    FROM (
        SELECT 
            T.Id AS ScheduleAssetType_Id, 
            T.Active AS ScheduleAssetType_Active, 
            T.Name AS ScheduleAssetType_Name, 
            T.Description AS ScheduleAssetType_Description, 
            T.[Value] AS ScheduleAssetType_Value, 
            T.System AS ScheduleAssetType_System, 
            True AS _from0
        FROM AltaskDataModelStoreContainer.ScheduleAssetType AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for AltaskEntities.ScheduleLogs.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView50()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ScheduleLogs
        [Altask.Data.Model.ScheduleLog](T1.ScheduleLog_Id, T1.ScheduleLog_ScheduleId, T1.ScheduleLog_Type, T1.ScheduleLog_Description, T1.ScheduleLog_SnapShot, T1.ScheduleLog_Metadata, T1.ScheduleLog_CreatedBy, T1.ScheduleLog_CreatedOn, T1.ScheduleLog_UpdatedBy, T1.ScheduleLog_UpdatedOn)
    FROM (
        SELECT 
            T.Id AS ScheduleLog_Id, 
            T.ScheduleId AS ScheduleLog_ScheduleId, 
            T.Type AS ScheduleLog_Type, 
            T.Description AS ScheduleLog_Description, 
            T.SnapShot AS ScheduleLog_SnapShot, 
            T.Metadata AS ScheduleLog_Metadata, 
            T.CreatedBy AS ScheduleLog_CreatedBy, 
            T.CreatedOn AS ScheduleLog_CreatedOn, 
            T.UpdatedBy AS ScheduleLog_UpdatedBy, 
            T.UpdatedOn AS ScheduleLog_UpdatedOn, 
            True AS _from0
        FROM AltaskDataModelStoreContainer.ScheduleLog AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for AltaskEntities.ScheduleUsers.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView51()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ScheduleUsers
        [Altask.Data.Model.ScheduleUser](T1.ScheduleUser_Id, T1.ScheduleUser_ScheduleId, T1.ScheduleUser_UserId, T1.ScheduleUser_ScheduleUserTypeId, T1.ScheduleUser_CreatedBy, T1.ScheduleUser_CreatedOn, T1.ScheduleUser_UpdatedBy, T1.ScheduleUser_UpdatedOn)
    FROM (
        SELECT 
            T.Id AS ScheduleUser_Id, 
            T.ScheduleId AS ScheduleUser_ScheduleId, 
            T.UserId AS ScheduleUser_UserId, 
            T.ScheduleUserTypeId AS ScheduleUser_ScheduleUserTypeId, 
            T.CreatedBy AS ScheduleUser_CreatedBy, 
            T.CreatedOn AS ScheduleUser_CreatedOn, 
            T.UpdatedBy AS ScheduleUser_UpdatedBy, 
            T.UpdatedOn AS ScheduleUser_UpdatedOn, 
            True AS _from0
        FROM AltaskDataModelStoreContainer.ScheduleUser AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for AltaskEntities.ScheduleUserTypes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView52()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ScheduleUserTypes
        [Altask.Data.Model.ScheduleUserType](T1.ScheduleUserType_Id, T1.ScheduleUserType_Active, T1.ScheduleUserType_Name, T1.ScheduleUserType_Description, T1.ScheduleUserType_Value, T1.ScheduleUserType_System)
    FROM (
        SELECT 
            T.Id AS ScheduleUserType_Id, 
            T.Active AS ScheduleUserType_Active, 
            T.Name AS ScheduleUserType_Name, 
            T.Description AS ScheduleUserType_Description, 
            T.[Value] AS ScheduleUserType_Value, 
            T.System AS ScheduleUserType_System, 
            True AS _from0
        FROM AltaskDataModelStoreContainer.ScheduleUserType AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for AltaskEntities.Tasks.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView53()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Tasks
        [Altask.Data.Model.Task](T1.Task_Id, T1.Task_Active, T1.Task_TaskTypeId, T1.Task_TaskCategoryId, T1.Task_FormId, T1.Task_Name, T1.Task_Description, T1.Task_Sequence, T1.Task_Metadata, T1.Task_CreatedBy, T1.Task_CreatedOn, T1.Task_UpdatedBy, T1.Task_UpdatedOn)
    FROM (
        SELECT 
            T.Id AS Task_Id, 
            T.Active AS Task_Active, 
            T.TaskTypeId AS Task_TaskTypeId, 
            T.TaskCategoryId AS Task_TaskCategoryId, 
            T.FormId AS Task_FormId, 
            T.Name AS Task_Name, 
            T.Description AS Task_Description, 
            T.Sequence AS Task_Sequence, 
            T.Metadata AS Task_Metadata, 
            T.CreatedBy AS Task_CreatedBy, 
            T.CreatedOn AS Task_CreatedOn, 
            T.UpdatedBy AS Task_UpdatedBy, 
            T.UpdatedOn AS Task_UpdatedOn, 
            True AS _from0
        FROM AltaskDataModelStoreContainer.Task AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for AltaskEntities.TaskAlerts.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView54()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing TaskAlerts
        [Altask.Data.Model.TaskAlert](T1.TaskAlert_Id, T1.TaskAlert_Active, T1.TaskAlert_TaskId, T1.TaskAlert_Name, T1.TaskAlert_TimeN, T1.TaskAlert_TimeUnit, T1.TaskAlert_When, T1.TaskAlert_IfNot, T1.TaskAlert_IfStatus, T1.TaskAlert_Metadata, T1.TaskAlert_CreatedBy, T1.TaskAlert_CreatedOn, T1.TaskAlert_UpdatedBy, T1.TaskAlert_UpdatedOn)
    FROM (
        SELECT 
            T.Id AS TaskAlert_Id, 
            T.Active AS TaskAlert_Active, 
            T.TaskId AS TaskAlert_TaskId, 
            T.Name AS TaskAlert_Name, 
            T.TimeN AS TaskAlert_TimeN, 
            T.TimeUnit AS TaskAlert_TimeUnit, 
            T.[When] AS TaskAlert_When, 
            T.IfNot AS TaskAlert_IfNot, 
            T.IfStatus AS TaskAlert_IfStatus, 
            T.Metadata AS TaskAlert_Metadata, 
            T.CreatedBy AS TaskAlert_CreatedBy, 
            T.CreatedOn AS TaskAlert_CreatedOn, 
            T.UpdatedBy AS TaskAlert_UpdatedBy, 
            T.UpdatedOn AS TaskAlert_UpdatedOn, 
            True AS _from0
        FROM AltaskDataModelStoreContainer.TaskAlert AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for AltaskEntities.TaskAlertLogs.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView55()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing TaskAlertLogs
        [Altask.Data.Model.TaskAlertLog](T1.TaskAlertLog_Id, T1.TaskAlertLog_TaskAlertId, T1.TaskAlertLog_UserId, T1.TaskAlertLog_Type, T1.TaskAlertLog_Description, T1.TaskAlertLog_AlertDate, T1.TaskAlertLog_Metadata, T1.TaskAlertLog_CreatedBy, T1.TaskAlertLog_CreatedOn, T1.TaskAlertLog_UpdatedBy, T1.TaskAlertLog_UpdatedOn)
    FROM (
        SELECT 
            T.Id AS TaskAlertLog_Id, 
            T.TaskAlertId AS TaskAlertLog_TaskAlertId, 
            T.UserId AS TaskAlertLog_UserId, 
            T.Type AS TaskAlertLog_Type, 
            T.Description AS TaskAlertLog_Description, 
            T.AlertDate AS TaskAlertLog_AlertDate, 
            T.Metadata AS TaskAlertLog_Metadata, 
            T.CreatedBy AS TaskAlertLog_CreatedBy, 
            T.CreatedOn AS TaskAlertLog_CreatedOn, 
            T.UpdatedBy AS TaskAlertLog_UpdatedBy, 
            T.UpdatedOn AS TaskAlertLog_UpdatedOn, 
            True AS _from0
        FROM AltaskDataModelStoreContainer.TaskAlertLog AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for AltaskEntities.TaskAlertUsers.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView56()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing TaskAlertUsers
        [Altask.Data.Model.TaskAlertUser](T1.TaskAlertUser_Id, T1.TaskAlertUser_TaskAlertId, T1.TaskAlertUser_UserId, T1.TaskAlertUser_CreatedBy, T1.TaskAlertUser_CreatedOn, T1.TaskAlertUser_UpdatedBy, T1.TaskAlertUser_UpdatedOn)
    FROM (
        SELECT 
            T.Id AS TaskAlertUser_Id, 
            T.TaskAlertId AS TaskAlertUser_TaskAlertId, 
            T.UserId AS TaskAlertUser_UserId, 
            T.CreatedBy AS TaskAlertUser_CreatedBy, 
            T.CreatedOn AS TaskAlertUser_CreatedOn, 
            T.UpdatedBy AS TaskAlertUser_UpdatedBy, 
            T.UpdatedOn AS TaskAlertUser_UpdatedOn, 
            True AS _from0
        FROM AltaskDataModelStoreContainer.TaskAlertUser AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for AltaskEntities.TaskCategories.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView57()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing TaskCategories
        [Altask.Data.Model.TaskCategory](T1.TaskCategory_Id, T1.TaskCategory_Active, T1.TaskCategory_Name, T1.TaskCategory_Description, T1.TaskCategory_Value, T1.TaskCategory_System)
    FROM (
        SELECT 
            T.Id AS TaskCategory_Id, 
            T.Active AS TaskCategory_Active, 
            T.Name AS TaskCategory_Name, 
            T.Description AS TaskCategory_Description, 
            T.[Value] AS TaskCategory_Value, 
            T.System AS TaskCategory_System, 
            True AS _from0
        FROM AltaskDataModelStoreContainer.TaskCategory AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for AltaskEntities.TaskTypes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView58()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing TaskTypes
        [Altask.Data.Model.TaskType](T1.TaskType_Id, T1.TaskType_Active, T1.TaskType_Name, T1.TaskType_Description, T1.TaskType_IsSchedulable, T1.TaskType_Value, T1.TaskType_System)
    FROM (
        SELECT 
            T.Id AS TaskType_Id, 
            T.Active AS TaskType_Active, 
            T.Name AS TaskType_Name, 
            T.Description AS TaskType_Description, 
            T.IsSchedulable AS TaskType_IsSchedulable, 
            T.[Value] AS TaskType_Value, 
            T.System AS TaskType_System, 
            True AS _from0
        FROM AltaskDataModelStoreContainer.TaskType AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for AltaskEntities.Users.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView59()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Users
        [Altask.Data.Model.User](T1.User_Id, T1.User_Active, T1.User_UserName, T1.User_FullName, T1.User_EmailAddress, T1.User_SmsAddress, T1.User_Metadata, T1.User_Settings, T1.User_MobilePhone, T1.User_ReceiveEmail, T1.User_ReceiveText, T1.User_PasswordHash, T1.User_SecurityStamp, T1.User_CreatedBy, T1.User_CreatedOn, T1.User_UpdatedBy, T1.User_UpdatedOn)
    FROM (
        SELECT 
            T.Id AS User_Id, 
            T.Active AS User_Active, 
            T.UserName AS User_UserName, 
            T.FullName AS User_FullName, 
            T.EmailAddress AS User_EmailAddress, 
            T.SmsAddress AS User_SmsAddress, 
            T.Metadata AS User_Metadata, 
            T.Settings AS User_Settings, 
            T.MobilePhone AS User_MobilePhone, 
            T.ReceiveEmail AS User_ReceiveEmail, 
            T.ReceiveText AS User_ReceiveText, 
            T.PasswordHash AS User_PasswordHash, 
            T.SecurityStamp AS User_SecurityStamp, 
            T.CreatedBy AS User_CreatedBy, 
            T.CreatedOn AS User_CreatedOn, 
            T.UpdatedBy AS User_UpdatedBy, 
            T.UpdatedOn AS User_UpdatedOn, 
            True AS _from0
        FROM AltaskDataModelStoreContainer.User AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for AltaskEntities.UserLogs.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView60()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing UserLogs
        [Altask.Data.Model.UserLog](T1.UserLog_Id, T1.UserLog_UserId, T1.UserLog_Type, T1.UserLog_Description, T1.UserLog_Metadata, T1.UserLog_CreatedBy, T1.UserLog_CreatedOn, T1.UserLog_UpdatedBy, T1.UserLog_UpdatedOn)
    FROM (
        SELECT 
            T.Id AS UserLog_Id, 
            T.UserId AS UserLog_UserId, 
            T.Type AS UserLog_Type, 
            T.Description AS UserLog_Description, 
            T.Metadata AS UserLog_Metadata, 
            T.CreatedBy AS UserLog_CreatedBy, 
            T.CreatedOn AS UserLog_CreatedOn, 
            T.UpdatedBy AS UserLog_UpdatedBy, 
            T.UpdatedOn AS UserLog_UpdatedOn, 
            True AS _from0
        FROM AltaskDataModelStoreContainer.UserLog AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for AltaskEntities.UserRoles.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView61()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing UserRoles
        [Altask.Data.Model.UserRole](T1.UserRole_Id, T1.UserRole_UserId, T1.UserRole_RoleId, T1.UserRole_Name, T1.UserRole_CreatedBy, T1.UserRole_CreatedOn, T1.UserRole_UpdatedBy, T1.UserRole_UpdatedOn)
    FROM (
        SELECT 
            T.Id AS UserRole_Id, 
            T.UserId AS UserRole_UserId, 
            T.RoleId AS UserRole_RoleId, 
            T.Name AS UserRole_Name, 
            T.CreatedBy AS UserRole_CreatedBy, 
            T.CreatedOn AS UserRole_CreatedOn, 
            T.UpdatedBy AS UserRole_UpdatedBy, 
            T.UpdatedOn AS UserRole_UpdatedOn, 
            True AS _from0
        FROM AltaskDataModelStoreContainer.UserRole AS T
    ) AS T1");
        }
    }
}
