//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Altask.Data.Model
{
    using Altask.Data;
    using Newtonsoft.Json;
    using System;
    using System.Xml;
    using System;
    using System.Collections.Generic;
    
    public partial class Asset : ISupportsIntId, ISupportsAuthorFields
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Asset()
        {
            this.Alerts = new HashSet<AssetAlert>();
            this.Groups = new HashSet<AssetGrouping>();
        }
    
    	/// <summary>
    	/// Gets or sets the Id of this <see cref='Altask.Data.Model.Asset'/>.
    	/// </summary>
        public int Id { get; set; }
    	/// <summary>
    	/// Gets or sets the Active of this <see cref='Altask.Data.Model.Asset'/>.
    	/// </summary>
        public bool Active { get; set; }
    	/// <summary>
    	/// Gets or sets the AssetTypeId of this <see cref='Altask.Data.Model.Asset'/>.
    	/// </summary>
        public int AssetTypeId { get; set; }
    	/// <summary>
    	/// Gets or sets the CustomId of this <see cref='Altask.Data.Model.Asset'/>.
    	/// </summary>
        public string CustomId { get; set; }
    	/// <summary>
    	/// Gets or sets the Name of this <see cref='Altask.Data.Model.Asset'/>.
    	/// </summary>
        public string Name { get; set; }
    	/// <summary>
    	/// Gets or sets the Description of this <see cref='Altask.Data.Model.Asset'/>.
    	/// </summary>
        public string Description { get; set; }
    	/// <summary>
    	/// Gets or sets the DepartmentId of this <see cref='Altask.Data.Model.Asset'/>.
    	/// </summary>
        public Nullable<int> DepartmentId { get; set; }
    	/// <summary>
    	/// Gets or sets the ManufacturerId of this <see cref='Altask.Data.Model.Asset'/>.
    	/// </summary>
        public Nullable<int> ManufacturerId { get; set; }
    	/// <summary>
    	/// Gets or sets the Model of this <see cref='Altask.Data.Model.Asset'/>.
    	/// </summary>
        public string Model { get; set; }
    	/// <summary>
    	/// Gets or sets the Serial of this <see cref='Altask.Data.Model.Asset'/>.
    	/// </summary>
        public string Serial { get; set; }
    	/// <summary>
    	/// Gets or sets the Metadata of this <see cref='Altask.Data.Model.Asset'/>.
    	/// </summary>
        public string Metadata { get; set; }
    	/// <summary>
    	/// Gets or sets the CreatedBy of this <see cref='Altask.Data.Model.Asset'/>.
    	/// </summary>
        public string CreatedBy { get; set; }
    	/// <summary>
    	/// Gets or sets the CreatedOn of this <see cref='Altask.Data.Model.Asset'/>.
    	/// </summary>
        public System.DateTime CreatedOn { get; set; }
    	/// <summary>
    	/// Gets or sets the UpdatedBy of this <see cref='Altask.Data.Model.Asset'/>.
    	/// </summary>
        public string UpdatedBy { get; set; }
    	/// <summary>
    	/// Gets or sets the UpdatedOn of this <see cref='Altask.Data.Model.Asset'/>.
    	/// </summary>
        public System.DateTime UpdatedOn { get; set; }
    
        public virtual AssetType Type { get; set; }
        public virtual Department Department { get; set; }
        public virtual Manufacturer Manufacturer { get; set; }
        public virtual ICollection<AssetAlert> Alerts { get; set; }
        public virtual ICollection<AssetGrouping> Groups { get; set; }
    }
    
    public static partial class Mapper {
    	/// <summary>
    	/// Maps a <see cref='Altask.Data.Model.Asset'/> object to a <see cref='Altask.Data.Dto.Asset'/> object.
    	/// </summary>
    	public static Altask.Data.Dto.Asset ToDto(this Altask.Data.Model.Asset entity) {
    		var dto = new Altask.Data.Dto.Asset();
    		dto.Id = entity.Id;
    		dto.Active = entity.Active;
    		dto.AssetTypeId = entity.AssetTypeId;
    		dto.CustomId = entity.CustomId;
    		dto.Name = entity.Name;
    		dto.Description = entity.Description;
    		dto.DepartmentId = entity.DepartmentId;
    		dto.ManufacturerId = entity.ManufacturerId;
    		dto.Model = entity.Model;
    		dto.Serial = entity.Serial;
    		dto.Metadata = JsonConvert.DeserializeObject("{Properties: []}");
    
    		if (!string.IsNullOrEmpty(entity.Metadata)) {
    			try {
    				XmlDocument doc = new XmlDocument();
    				doc.LoadXml(entity.Metadata);
    				string json = Json.SerizlieXmlDocument(doc);
    				dto.Metadata = JsonConvert.DeserializeObject(json);
    			} catch(Exception) {}
    		}
    
    		dto.CreatedBy = entity.CreatedBy;
    		dto.CreatedOn = entity.CreatedOn;
    		dto.UpdatedBy = entity.UpdatedBy;
    		dto.UpdatedOn = entity.UpdatedOn;
    
    		if (entity.Type != null) {
    			dto.Type = entity.Type.ToDto();
    		}
    
    		if (entity.Department != null) {
    			dto.Department = entity.Department.ToDto();
    		}
    
    		if (entity.Manufacturer != null) {
    			dto.Manufacturer = entity.Manufacturer.ToDto();
    		}
    
    		dto.Alerts = new List<Altask.Data.Dto.AssetAlert>();
    		
    		if (entity.Alerts != null) {
    			foreach(var item in entity.Alerts) {
    				dto.Alerts.Add(item.ToDto());
    			}
    		}
    
    		dto.Groups = new List<Altask.Data.Dto.AssetGrouping>();
    		
    		if (entity.Groups != null) {
    			foreach(var item in entity.Groups) {
    				dto.Groups.Add(item.ToDto());
    			}
    		}
    
    		return dto;
    	}
    
    	/// <summary>
    	/// Maps all the non-primary key and tracking properties of a <see cref='Altask.Data.Dto.Asset'/> object to a <see cref='Altask.Data.Model.Asset'/> object.
    	/// </summary>
    	public static Altask.Data.Model.Asset FromDto(this Altask.Data.Model.Asset model, Altask.Data.Dto.Asset entity) {
    		model.Active = entity.Active;
    		model.AssetTypeId = entity.AssetTypeId;
    		model.CustomId = entity.CustomId;
    		model.Name = entity.Name;
    		model.Description = entity.Description;
    		model.DepartmentId = entity.DepartmentId;
    		model.ManufacturerId = entity.ManufacturerId;
    		model.Model = entity.Model;
    		model.Serial = entity.Serial;
    		model.Metadata = string.Empty;
    
    		try {
    			model.Metadata = ((XmlDocument)JsonConvert.DeserializeXmlNode(entity.Metadata.ToString(), "Properties")).OuterXml;
    		} catch(Exception) {}
    
    		return model;
    	}
    }
}
