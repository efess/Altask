//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Altask.www.Controllers
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Threading.Tasks;
    using System.Web.Mvc;
    using System.Xml;
    using Altask.www.Models;
    using Data.Model;
    
    [Authorize]
    public partial class AssetAlertUserController : BaseController<Altask.Data.Model.AssetAlertUser, Altask.Data.Dto.AssetAlertUser>
    {
    	/// <summary>
    	/// Constructor
    	/// </summary>
    	public AssetAlertUserController() : base() {
    	
    	}
    
    	/// <summary>
    	/// Constructor
    	/// </summary>
    	/// <param name="userManager">The application user manager used in this application. UserManager is defined in ASP.NET Identity and is used by the application.</param>
    	/// <param name="signInManager">The application sign-in manager which is used in this application.</param>
    	public AssetAlertUserController(ApplicationUserManager userManager, ApplicationSignInManager signInManager) : base(userManager, signInManager) {
    
    	}
    
    	[HttpPost]
    	[JsonNetFilter]
    	/// <summary>
    	/// Create a <see cref="Altask.Data.Model.AssetAlertUser"/>.
    	/// </summary>
    	/// <param name="assetAlertUser"></param>
    	/// <returns>Returns a <see cref="Altask.Data.EntityResult"/> indicating success or failure.</returns>
    	public virtual async Task<ActionResult> Create(Altask.Data.Dto.AssetAlertUser assetAlertUser) {
    		ThrowIfDisposed();
    
    		if (!ModelState.IsValid) {
    			return BadRequest(ModelState);
    		}
    
    		var newAssetAlertUser = new Altask.Data.Model.AssetAlertUser().FromDto(assetAlertUser);
    		Context.AssetAlertUsers.Add(newAssetAlertUser);
    		BeforeCreate(newAssetAlertUser, assetAlertUser);
    		var result = await Context.SaveChangesAsync();
    		Context.Entry(newAssetAlertUser).Reference(e => e.User).Load();
        
        	if (result.Succeeded) {
    			await AfterCreateAsync(newAssetAlertUser);
    			return Ok(new { assetAlertUser = newAssetAlertUser.ToDto() });
        	} else {
        		return BadRequest(result);
        	}
    	}
    
    	[HttpGet]
    	[JsonNetFilter]
    	/// <summary>
    	/// Returns a <see cref="Altask.Data.Model.AssetAlertUser"/> having the specified ID.
    	/// </summary>
    	/// <param name="id">The ID of the <see cref="Altask.Data.Model.AssetAlertUser"/>.</param>
    	/// <returns>Returns a <see cref="Altask.Data.EntityResult"/> indicating success or failure.</returns>
    	public virtual async Task<ActionResult> FindById(long id) {
    		ThrowIfDisposed();
    		var assetAlertUser = await Context.AssetAlertUsers.FindAsync(id);
    		return Ok(new { assetAlertUser = assetAlertUser.ToDto() }, JsonRequestBehavior.AllowGet);
    	}
    
    	[HttpGet]
    	[JsonNetFilter]
    	/// <summary>
    	/// Returns a collection of <see cref="Altask.Data.Model.AssetAlertUser"/> objects matching the specified filter.
    	/// </summary>
    	/// <param name="filter">A <see cref="Altask.www.Models.AssetAlertUserListOptions"/> object on which to filter.</param>
    	/// <returns>Returns a <see cref="Altask.Data.EntityResult"/> indicating success or failure.</returns>
    	public virtual async Task<ActionResult> List(AssetAlertUserListOptions filter) {
    		ThrowIfDisposed();
    
    		if (filter == null) {
    			filter = new AssetAlertUserListOptions();
    		}
    
    		var dtoAssetAlertUsers = new List<Altask.Data.Dto.AssetAlertUser>();
    		var assetAlertUser = await Context.AssetAlertUsers.AsNoTracking().Where(filter.GetPredicate())
    			.Include(e => e.User)
    			.ToListAsync();
    
    		foreach(var item in assetAlertUser) {
    			dtoAssetAlertUsers.Add(item.ToDto());
    		}
    
    		return Ok(new { assetAlertUsers = dtoAssetAlertUsers }, JsonRequestBehavior.AllowGet);
    	}
    
    	[HttpPost]
    	[JsonNetFilter]
    	/// <summary>
    	/// Updates the specified <see cref="Altask.Data.Model.AssetAlertUser"/>.
    	/// </summary>
    	/// <param name="assetAlertUser"></param>
    	/// <returns>Returns a <see cref="Altask.Data.EntityResult"/> indicating success or failure.</returns>
    	public virtual async Task<ActionResult> Update(Altask.Data.Dto.AssetAlertUser assetAlertUser) {
    		ThrowIfDisposed();
    
    		if (!ModelState.IsValid) {
    			return BadRequest(ModelState);
    		}
    
    		var assetAlertUserEntity = await Context.AssetAlertUsers.FindAsync(assetAlertUser.Id);
    
    		if (assetAlertUserEntity == null) {
    			return BadRequest(ErrorDescriber.DoesNotExist("AssetAlertUser"));
    		}
    
    		assetAlertUserEntity.FromDto(assetAlertUser);
    		Context.Entry(assetAlertUserEntity).State = EntityState.Modified;
    		BeforeUpdate(assetAlertUserEntity, assetAlertUser);
    		var result = await Context.SaveChangesAsync();
    		Context.Entry(assetAlertUserEntity).Reference(e => e.User).Load();
        
        	if (result.Succeeded) {
    			await AfterUpdateAsync(assetAlertUserEntity);
    			return Ok(new { assetAlertUser = assetAlertUserEntity.ToDto() });
        	} else {
        		return BadRequest(result);
        	}
    	}
    }
}
