//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Altask.www.Controllers
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Linq;
    using System.Threading.Tasks;
    using System.Web.Mvc;
    using System.Xml;
    using Altask.www.Models;
    using Data.Model;
    
    [Authorize]
    public partial class AssetLogTypeController : BaseController<Altask.Data.Model.AssetLogType, Altask.Data.Dto.AssetLogType>
    {
    	/// <summary>
    	/// Constructor
    	/// </summary>
    	public AssetLogTypeController() : base() {
    	
    	}
    
    	/// <summary>
    	/// Constructor
    	/// </summary>
    	/// <param name="userManager">The application user manager used in this application. UserManager is defined in ASP.NET Identity and is used by the application.</param>
    	/// <param name="signInManager">The application sign-in manager which is used in this application.</param>
    	public AssetLogTypeController(ApplicationUserManager userManager, ApplicationSignInManager signInManager) : base(userManager, signInManager) {
    
    	}
    
    	[HttpPost]
    	[JsonNetFilter]
    	/// <summary>
    	/// Create a <see cref="Altask.Data.Model.AssetLogType"/>.
    	/// </summary>
    	/// <param name="assetLogType"></param>
    	/// <returns>Returns a <see cref="Altask.Data.EntityResult"/> indicating success or failure.</returns>
    	public virtual async Task<ActionResult> Create(Altask.Data.Dto.AssetLogType assetLogType) {
    		ThrowIfDisposed();
    
    		if (!ModelState.IsValid) {
    			return BadRequest(ModelState);
    		}
    
    		var newAssetLogType = new Altask.Data.Model.AssetLogType().FromDto(assetLogType);
    		Context.AssetLogTypes.Add(newAssetLogType);
    		BeforeCreate(newAssetLogType, assetLogType);
    		var result = await Context.SaveChangesAsync();
    		Context.Entry(newAssetLogType).Collection(e => e.Assets).Load();
    		Context.Entry(newAssetLogType).Reference(e => e.Category).Load();
        
        	if (result.Succeeded) {
    			await AfterCreateAsync(newAssetLogType);
    			return Ok(new { assetLogType = newAssetLogType.ToDto() });
        	} else {
        		return BadRequest(result);
        	}
    	}
    
    	[HttpGet]
    	[JsonNetFilter]
    	/// <summary>
    	/// Returns a <see cref="Altask.Data.Model.AssetLogType"/> having the specified ID.
    	/// </summary>
    	/// <param name="id">The ID of the <see cref="Altask.Data.Model.AssetLogType"/>.</param>
    	/// <returns>Returns a <see cref="Altask.Data.EntityResult"/> indicating success or failure.</returns>
    	public virtual async Task<ActionResult> FindById(int id) {
    		ThrowIfDisposed();
    		var assetLogType = await Context.AssetLogTypes.FindAsync(id);
    		return Ok(new { assetLogType = assetLogType.ToDto() }, JsonRequestBehavior.AllowGet);
    	}
    
    	[HttpGet]
    	[JsonNetFilter]
    	/// <summary>
    	/// Returns a collection of <see cref="Altask.Data.Model.AssetLogType"/> objects matching the specified filter.
    	/// </summary>
    	/// <param name="filter">A <see cref="Altask.www.Models.AssetLogTypeListOptions"/> object on which to filter.</param>
    	/// <returns>Returns a <see cref="Altask.Data.EntityResult"/> indicating success or failure.</returns>
    	public virtual async Task<ActionResult> List(AssetLogTypeListOptions filter) {
    		ThrowIfDisposed();
    
    		if (filter == null) {
    			filter = new AssetLogTypeListOptions();
    		}
    
    		var dtoAssetLogTypes = new List<Altask.Data.Dto.AssetLogType>();
    		var assetLogType = await Context.AssetLogTypes.AsNoTracking().Where(filter.GetPredicate())
    			.Include(e => e.Category)
    			.Include(e => e.Assets)
    			.ToListAsync();
    
    		foreach(var item in assetLogType) {
    			dtoAssetLogTypes.Add(item.ToDto());
    		}
    
    		return Ok(new { assetLogTypes = dtoAssetLogTypes }, JsonRequestBehavior.AllowGet);
    	}
    
    	[HttpPost]
    	[JsonNetFilter]
    	/// <summary>
    	/// Updates the specified <see cref="Altask.Data.Model.AssetLogType"/>.
    	/// </summary>
    	/// <param name="assetLogType"></param>
    	/// <returns>Returns a <see cref="Altask.Data.EntityResult"/> indicating success or failure.</returns>
    	public virtual async Task<ActionResult> Update(Altask.Data.Dto.AssetLogType assetLogType) {
    		ThrowIfDisposed();
    
    		if (!ModelState.IsValid) {
    			return BadRequest(ModelState);
    		}
    
    		var assetLogTypeEntity = await Context.AssetLogTypes.FindAsync(assetLogType.Id);
    
    		if (assetLogTypeEntity == null) {
    			return BadRequest(ErrorDescriber.DoesNotExist("AssetLogType"));
    		}
    
    		assetLogTypeEntity.FromDto(assetLogType);
    		Context.Entry(assetLogTypeEntity).State = EntityState.Modified;
    		BeforeUpdate(assetLogTypeEntity, assetLogType);
    		var result = await Context.SaveChangesAsync();
    		Context.Entry(assetLogTypeEntity).Collection(e => e.Assets).Load();
    		Context.Entry(assetLogTypeEntity).Reference(e => e.Category).Load();
        
        	if (result.Succeeded) {
    			await AfterUpdateAsync(assetLogTypeEntity);
    			return Ok(new { assetLogType = assetLogTypeEntity.ToDto() });
        	} else {
        		return BadRequest(result);
        	}
    	}
    }
}
