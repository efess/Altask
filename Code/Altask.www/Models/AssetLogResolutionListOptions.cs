//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Altask.www.Models
{
    using System;
    using System.Collections.Generic;
    using System.Linq.Expressions;
    /// <summary>
    ///	Represents a collection of properties on which you can filter a collection of <see cref="Altask.Data.Dto.AssetLogResolution"/> objects.
    /// </summary>
    public partial class AssetLogResolutionListOptions : ListOptions<Altask.Data.Model.AssetLogResolution>
    {
    	/// <summary>
    	///	A comma delimited string representing one or more <see cref="Altask.Data.Dto.AssetLogResolution"/>.OccurrenceId values to filter on.
    	/// </summary>
    	public string OccurrenceIds { get; set; }
    
    	/// <summary>
    	///	Parses the OccurrenceIds property and returns a <see cref="System.Collections.Generic.List{Int64}"/> containing any <see cref="Altask.Data.Dto.AssetLogResolution"/>.OccurrenceId values to filter on.
    	/// </summary>
    	public List<Int64> GetOccurrenceIds() {
    		var list = new List<Int64>();
    		
    		if (OccurrenceIds != null) {
    			var items = OccurrenceIds.Split(',');
    
    			foreach(var item in items) {
    				Int64 parsed;
    
    				if (Int64.TryParse(item, out parsed)) {
    					list.Add(parsed);
    				}
    			}
    		}
    
    		return list;
    	}
    
    	/// <summary>
    	///	Creates a Predicate derived from the filter's OccurrenceIds property.
    	/// </summary>
    	private Expression<Func<Altask.Data.Model.AssetLogResolution, bool>> GetOccurrenceIdsPredicate() {
    		var values = GetOccurrenceIds();
    
    		if (values.Count > 0) {
    			var predicate = PredicateBuilder.False<Altask.Data.Model.AssetLogResolution>();
    
    			foreach(var item in values) {
    				var value = item;
    				predicate = predicate.Or(e => e.OccurrenceId == value);
    			}
    
    			return predicate;
    		}
    		
    		return null;	
    	}
    
    	/// <summary>
    	///	A comma delimited string representing one or more <see cref="Altask.Data.Dto.AssetLogResolution"/>.TaskId values to filter on.
    	/// </summary>
    	public string TaskIds { get; set; }
    
    	/// <summary>
    	///	Parses the TaskIds property and returns a <see cref="System.Collections.Generic.List{Int64}"/> containing any <see cref="Altask.Data.Dto.AssetLogResolution"/>.TaskId values to filter on.
    	/// </summary>
    	public List<Int64> GetTaskIds() {
    		var list = new List<Int64>();
    		
    		if (TaskIds != null) {
    			var items = TaskIds.Split(',');
    
    			foreach(var item in items) {
    				Int64 parsed;
    
    				if (Int64.TryParse(item, out parsed)) {
    					list.Add(parsed);
    				}
    			}
    		}
    
    		return list;
    	}
    
    	/// <summary>
    	///	Creates a Predicate derived from the filter's TaskIds property.
    	/// </summary>
    	private Expression<Func<Altask.Data.Model.AssetLogResolution, bool>> GetTaskIdsPredicate() {
    		var values = GetTaskIds();
    
    		if (values.Count > 0) {
    			var predicate = PredicateBuilder.False<Altask.Data.Model.AssetLogResolution>();
    
    			foreach(var item in values) {
    				var value = item;
    				predicate = predicate.Or(e => e.TaskId == value);
    			}
    
    			return predicate;
    		}
    		
    		return null;	
    	}
    
    	/// <summary>
    	///	Creates a Predicate from the filter's specified properties which evaluates to true.
    	/// </summary>
    	public Expression<Func<Altask.Data.Model.AssetLogResolution, bool>> GetPredicate() {
    		var predicate = PredicateBuilder.True<Altask.Data.Model.AssetLogResolution>();
    		var custom = GetCustomPredicate();
    
            if (custom != null) {
                predicate = predicate.And(custom);
            }
    
    		var occurrenceIdsPredicate = GetOccurrenceIdsPredicate();
    
    		if (occurrenceIdsPredicate != null) {
    			predicate = predicate.And(occurrenceIdsPredicate);
    		}
    		var taskIdsPredicate = GetTaskIdsPredicate();
    
    		if (taskIdsPredicate != null) {
    			predicate = predicate.And(taskIdsPredicate);
    		}
    
    		return predicate;	
    	}
    }
}
