<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ include file="EF6.Utility.CS.ttinclude"#>
<#@ assembly name="System.Data.Entity.Design" #>
<#@ import namespace="System.Data.Entity.Design.PluralizationServices" #>
<#@ output extension=".cs"#>
<#

const string inputFile = @"../../Altask.Data/Model/DatabaseModel.edmx";
var textTransform = DynamicTextTransformation.Create(this);
var code = new CodeGenerationTools(this);
var ef = new MetadataTools(this);
var typeMapper = new TypeMapper(code, ef, textTransform.Errors);
var	fileManager = EntityFrameworkTemplateFileManager.Create(this);
var itemCollection = new EdmMetadataLoader(textTransform.Host, textTransform.Errors).CreateEdmItemCollection(inputFile);
var codeStringGenerator = new CodeStringGenerator(code, typeMapper, ef);
var pluralizer = PluralizationService.CreateService(System.Globalization.CultureInfo.CurrentCulture);

WriteHeader(codeStringGenerator, fileManager);
var itemsToGenerate = typeMapper.GetItemsToGenerate<EntityType>(itemCollection);

foreach (var entity in itemsToGenerate)
{
	var entityName = typeMapper.GetTypeName(entity);
	var entityNamePascal = typeMapper.PascalCase(entityName);
	var properties = typeMapper.GetSimpleProperties(entity);
	bool supportsIntId = properties.Any(p => p.Name == "Id" &&
		((PrimitiveType)p.TypeUsage.EdmType).ClrEquivalentType.Equals(typeof(int)));
	bool supportsLongId = properties.Any(p => p.Name == "Id" &&
		((PrimitiveType)p.TypeUsage.EdmType).ClrEquivalentType.Equals(typeof(long)));
	var activeProperty = typeMapper.GetSimpleProperty(entity, "Active");
	var navigationProperties = typeMapper.GetNavigationProperties(entity);

    if (navigationProperties.Any() || activeProperty != null)
    {
		fileManager.StartNewFile(entity.Name + "ListOptions.cs");
		BeginNamespace(code);
#>
<#=codeStringGenerator.UsingDirectives(inHeader: false)#>
/// <summary>
///	Represents a collection of properties on which you can filter a collection of <see cref="Altask.Data.Dto.<#=entityName#>"/> objects.
/// </summary>
public partial class <#=entityName#>ListOptions : ListOptions<Altask.Data.Model.<#=entityName#>>
{
<#
		if (activeProperty != null) {
#>
	/// <summary>
	/// Indicates wheather to filter on the <see cref="Altask.Data.Dto.<#=entityName#>"/>.Active property.
	/// </summary>
	public bool? Active { get; set; }

	/// <summary>
	///	Creates a Predicate derived from the filter's Active property.
	/// </summary>
	private Expression<Func<Altask.Data.Model.<#=entityName#>, bool>> GetActivePredicate() {
		if (Active.HasValue) {
			var predicate = PredicateBuilder.True<Altask.Data.Model.<#=entityName#>>();
			var value = Active.Value;
			predicate = predicate.And(e => e.Active == value);
			return predicate;
		}
		
		return null;	
	}
		
<#
		}

		foreach(var property in navigationProperties) {
			var dependentProperty = property.GetDependentProperties().First();
#>
	/// <summary>
	///	A comma delimited string representing one or more <see cref="Altask.Data.Dto.<#=entityName#>"/>.<#=dependentProperty.Name#> values to filter on.
	/// </summary>
	public string <#=pluralizer.Pluralize(dependentProperty.Name)#> { get; set; }

	/// <summary>
	///	Parses the <#=pluralizer.Pluralize(dependentProperty.Name)#> property and returns a <see cref="System.Collections.Generic.List{<#=((PrimitiveType)dependentProperty.TypeUsage.EdmType).ClrEquivalentType.Name#>}"/> containing any <see cref="Altask.Data.Dto.<#=entityName#>"/>.<#=dependentProperty.Name#> values to filter on.
	/// </summary>
	public List<<#=((PrimitiveType)dependentProperty.TypeUsage.EdmType).ClrEquivalentType.Name#>> Get<#=pluralizer.Pluralize(dependentProperty.Name)#>() {
		var list = new List<<#=((PrimitiveType)dependentProperty.TypeUsage.EdmType).ClrEquivalentType.Name#>>();
		
		if (<#=pluralizer.Pluralize(dependentProperty.Name)#> != null) {
			var items = <#=pluralizer.Pluralize(dependentProperty.Name)#>.Split(',');

			foreach(var item in items) {
				<#=((PrimitiveType)dependentProperty.TypeUsage.EdmType).ClrEquivalentType.Name#> parsed;

				if (<#=((PrimitiveType)dependentProperty.TypeUsage.EdmType).ClrEquivalentType.Name#>.TryParse(item, out parsed)) {
					list.Add(parsed);
				}
			}
		}

		return list;
	}

	/// <summary>
	///	Creates a Predicate derived from the filter's <#=pluralizer.Pluralize(dependentProperty.Name)#> property.
	/// </summary>
	private Expression<Func<Altask.Data.Model.<#=entityName#>, bool>> Get<#=pluralizer.Pluralize(dependentProperty.Name)#>Predicate() {
		var values = Get<#=pluralizer.Pluralize(dependentProperty.Name)#>();

		if (values.Count > 0) {
			var predicate = PredicateBuilder.False<Altask.Data.Model.<#=entityName#>>();

			foreach(var item in values) {
				var value = item;
				predicate = predicate.Or(e => e.<#=dependentProperty.Name#> == value);
			}

			return predicate;
		}
		
		return null;	
	}

<#
		}
#>
	/// <summary>
	///	Creates a Predicate from the filter's specified properties which evaluates to true.
	/// </summary>
	public Expression<Func<Altask.Data.Model.<#=entityName#>, bool>> GetPredicate() {
		var predicate = PredicateBuilder.True<Altask.Data.Model.<#=entityName#>>();
		var custom = GetCustomPredicate();

        if (custom != null) {
            predicate = predicate.And(custom);
        }

<#
		if (activeProperty != null){
#>
		var activePredicate = GetActivePredicate();

		if (activePredicate != null) {
			predicate = predicate.And(activePredicate);
		}
<#
		}

		foreach(var property in navigationProperties) {
			var dependentProperty = property.GetDependentProperties().First();
			var predicateName = typeMapper.PascalCase(pluralizer.Pluralize(dependentProperty.Name)) + "Predicate";
#>
		var <#=predicateName#> = Get<#=pluralizer.Pluralize(dependentProperty.Name)#>Predicate();

		if (<#=predicateName#> != null) {
			predicate = predicate.And(<#=predicateName#>);
		}
<#
		}
#>

		return predicate;	
	}
}
<#
		EndNamespace(code);
	}
}

fileManager.Process();

#>
<#+

public void WriteHeader(CodeStringGenerator codeStringGenerator, EntityFrameworkTemplateFileManager fileManager)
{
    fileManager.StartHeader();
#>
//------------------------------------------------------------------------------
// <auto-generated>
// <#=CodeGenerationTools.GetResourceString("Template_GeneratedCodeCommentLine1")#>
//
// <#=CodeGenerationTools.GetResourceString("Template_GeneratedCodeCommentLine2")#>
// <#=CodeGenerationTools.GetResourceString("Template_GeneratedCodeCommentLine3")#>
// </auto-generated>
//------------------------------------------------------------------------------
<#=codeStringGenerator.UsingDirectives(inHeader: true)#>
<#+
    fileManager.EndBlock();
}

public void BeginNamespace(CodeGenerationTools code)
{
    var codeNamespace = code.VsNamespaceSuggestion();
    if (!String.IsNullOrEmpty(codeNamespace))
    {
#>
namespace <#=code.EscapeNamespace(codeNamespace)#>
{
<#+
        PushIndent("    ");
    }
}

public void EndNamespace(CodeGenerationTools code)
{
    if (!String.IsNullOrEmpty(code.VsNamespaceSuggestion()))
    {
        PopIndent();
#>
}
<#+
    }
}

public const string TemplateId = "CSharp_DbContext_Types_EF6";

public class CodeStringGenerator
{
    private readonly CodeGenerationTools _code;
    private readonly TypeMapper _typeMapper;
    private readonly MetadataTools _ef;

    public CodeStringGenerator(CodeGenerationTools code, TypeMapper typeMapper, MetadataTools ef)
    {
        ArgumentNotNull(code, "code");
        ArgumentNotNull(typeMapper, "typeMapper");
        ArgumentNotNull(ef, "ef");

        _code = code;
        _typeMapper = typeMapper;
        _ef = ef;
    }

    public string AccessibilityAndVirtual(string accessibility)
    {
        return accessibility + (accessibility != "private" ? " virtual" : "");
    }
    
    public string EntityClassOpening(TypeMapper typeMapper, EntityType entity)
    {
		string opening = string.Format(
            CultureInfo.InvariantCulture,
            "{0} {1}partial class {2}",
            Accessibility.ForType(entity),
            _code.SpaceAfter(_code.AbstractOption(entity)),
            _code.Escape(entity + "Controller"));

		return opening;
    }
    
    public string UsingDirectives(bool inHeader, bool includeCollections = true)
    {
        return inHeader == string.IsNullOrEmpty(_code.VsNamespaceSuggestion())
            ? string.Format(
                CultureInfo.InvariantCulture,
                "{0}using System;" + Environment.NewLine +
                "using System.Collections.Generic;" + Environment.NewLine +
				"using System.Linq.Expressions;",
                inHeader ? Environment.NewLine : "")
            : "";
    }
}

public class TypeMapper
{
    private const string ExternalTypeNameAttributeName = @"http://schemas.microsoft.com/ado/2006/04/codegeneration:ExternalTypeName";

    private readonly System.Collections.IList _errors;
    private readonly CodeGenerationTools _code;
    private readonly MetadataTools _ef;

    public TypeMapper(CodeGenerationTools code, MetadataTools ef, System.Collections.IList errors)
    {
        ArgumentNotNull(code, "code");
        ArgumentNotNull(ef, "ef");
        ArgumentNotNull(errors, "errors");

        _code = code;
        _ef = ef;
        _errors = errors;
    }

	public string PascalCase(string name){
		return Char.ToLowerInvariant(name[0]) + name.Substring(1);
	}

    public static string FixNamespaces(string typeName)
    {
        return typeName.Replace("System.Data.Spatial.", "System.Data.Entity.Spatial.");
    }

    public string GetTypeName(TypeUsage typeUsage)
    {
        return typeUsage == null ? null : GetTypeName(typeUsage.EdmType, _ef.IsNullable(typeUsage), modelNamespace: null);
    }

    public string GetTypeName(EdmType edmType)
    {
        return GetTypeName(edmType, isNullable: null, modelNamespace: null);
    }

    public string GetTypeName(TypeUsage typeUsage, string modelNamespace)
    {
        return typeUsage == null ? null : GetTypeName(typeUsage.EdmType, _ef.IsNullable(typeUsage), modelNamespace);
    }

    public string GetTypeName(EdmType edmType, string modelNamespace)
    {
        return GetTypeName(edmType, isNullable: null, modelNamespace: modelNamespace);
    }

    public string GetTypeName(EdmType edmType, bool? isNullable, string modelNamespace)
    {
        if (edmType == null)
        {
            return null;
        }

        var collectionType = edmType as CollectionType;
        if (collectionType != null)
        {
            return String.Format(CultureInfo.InvariantCulture, "ICollection<{0}>", GetTypeName(collectionType.TypeUsage, modelNamespace));
        }

        var typeName = _code.Escape(edmType.MetadataProperties
                                .Where(p => p.Name == ExternalTypeNameAttributeName)
                                .Select(p => (string)p.Value)
                                .FirstOrDefault())
            ?? (modelNamespace != null && edmType.NamespaceName != modelNamespace ?
                _code.CreateFullName(_code.EscapeNamespace(edmType.NamespaceName), _code.Escape(edmType)) :
                _code.Escape(edmType));

        if (edmType is StructuralType)
        {
            return typeName;
        }

        if (edmType is SimpleType)
        {
            var clrType = UnderlyingClrType(edmType);
            if (!IsEnumType(edmType))
            {
                typeName = _code.Escape(clrType);
            }

            typeName = FixNamespaces(typeName);

            return clrType.IsValueType && isNullable == true ?
                String.Format(CultureInfo.InvariantCulture, "Nullable<{0}>", typeName) :
                typeName;
        }

        throw new ArgumentException("edmType");
    }
    
    public Type UnderlyingClrType(EdmType edmType)
    {
        ArgumentNotNull(edmType, "edmType");

        var primitiveType = edmType as PrimitiveType;
        if (primitiveType != null)
        {
            return primitiveType.ClrEquivalentType;
        }

        if (IsEnumType(edmType))
        {
            return GetEnumUnderlyingType(edmType).ClrEquivalentType;
        }

        return typeof(object);
    }
    
    public object GetEnumMemberValue(MetadataItem enumMember)
    {
        ArgumentNotNull(enumMember, "enumMember");
        
        var valueProperty = enumMember.GetType().GetProperty("Value");
        return valueProperty == null ? null : valueProperty.GetValue(enumMember, null);
    }
    
    public string GetEnumMemberName(MetadataItem enumMember)
    {
        ArgumentNotNull(enumMember, "enumMember");
        
        var nameProperty = enumMember.GetType().GetProperty("Name");
        return nameProperty == null ? null : (string)nameProperty.GetValue(enumMember, null);
    }

    public System.Collections.IEnumerable GetEnumMembers(EdmType enumType)
    {
        ArgumentNotNull(enumType, "enumType");

        var membersProperty = enumType.GetType().GetProperty("Members");
        return membersProperty != null 
            ? (System.Collections.IEnumerable)membersProperty.GetValue(enumType, null)
            : Enumerable.Empty<MetadataItem>();
    }
    
    public bool EnumIsFlags(EdmType enumType)
    {
        ArgumentNotNull(enumType, "enumType");
        
        var isFlagsProperty = enumType.GetType().GetProperty("IsFlags");
        return isFlagsProperty != null && (bool)isFlagsProperty.GetValue(enumType, null);
    }

    public bool IsEnumType(GlobalItem edmType)
    {
        ArgumentNotNull(edmType, "edmType");

        return edmType.GetType().Name == "EnumType";
    }

    public PrimitiveType GetEnumUnderlyingType(EdmType enumType)
    {
        ArgumentNotNull(enumType, "enumType");

        return (PrimitiveType)enumType.GetType().GetProperty("UnderlyingType").GetValue(enumType, null);
    }

    public string CreateLiteral(object value)
    {
        if (value == null || value.GetType() != typeof(TimeSpan))
        {
            return _code.CreateLiteral(value);
        }

        return string.Format(CultureInfo.InvariantCulture, "new TimeSpan({0})", ((TimeSpan)value).Ticks);
    }
    
    public bool VerifyCaseInsensitiveTypeUniqueness(IEnumerable<string> types, string sourceFile)
    {
        ArgumentNotNull(types, "types");
        ArgumentNotNull(sourceFile, "sourceFile");
        
        var hash = new HashSet<string>(StringComparer.InvariantCultureIgnoreCase);
        if (types.Any(item => !hash.Add(item)))
        {
            _errors.Add(
                new CompilerError(sourceFile, -1, -1, "6023",
                    String.Format(CultureInfo.CurrentCulture, CodeGenerationTools.GetResourceString("Template_CaseInsensitiveTypeConflict"))));
            return false;
        }
        return true;
    }
    
    public IEnumerable<SimpleType> GetEnumItemsToGenerate(IEnumerable<GlobalItem> itemCollection)
    {
        return GetItemsToGenerate<SimpleType>(itemCollection)
            .Where(e => IsEnumType(e));
    }
    
    public IEnumerable<T> GetItemsToGenerate<T>(IEnumerable<GlobalItem> itemCollection) where T: EdmType
    {
        return itemCollection
            .OfType<T>()
            .Where(i => !i.MetadataProperties.Any(p => p.Name == ExternalTypeNameAttributeName))
            .OrderBy(i => i.Name);
    }

    public IEnumerable<string> GetAllGlobalItems(IEnumerable<GlobalItem> itemCollection)
    {
        return itemCollection
            .Where(i => i is EntityType || i is ComplexType || i is EntityContainer || IsEnumType(i))
            .Select(g => GetGlobalItemName(g));
    }

    public string GetGlobalItemName(GlobalItem item)
    {
        if (item is EdmType)
        {
            return ((EdmType)item).Name;
        }
        else
        {
            return ((EntityContainer)item).Name;
        }
    }

    public IEnumerable<EdmProperty> GetSimpleProperties(EntityType type)
    {
        return type.Properties.Where(p => p.TypeUsage.EdmType is SimpleType && p.DeclaringType == type);
    }

	public EdmProperty GetSimpleProperty(EntityType type, string name)
    {
        return type.Properties.FirstOrDefault(p => p.TypeUsage.EdmType is SimpleType && p.DeclaringType == type && p.Name == name);
    }
    
    public IEnumerable<EdmProperty> GetSimpleProperties(ComplexType type)
    {
        return type.Properties.Where(p => p.TypeUsage.EdmType is SimpleType && p.DeclaringType == type);
    }
    
    public IEnumerable<EdmProperty> GetComplexProperties(EntityType type)
    {
        return type.Properties.Where(p => p.TypeUsage.EdmType is ComplexType && p.DeclaringType == type);
    }
    
    public IEnumerable<EdmProperty> GetComplexProperties(ComplexType type)
    {
        return type.Properties.Where(p => p.TypeUsage.EdmType is ComplexType && p.DeclaringType == type);
    }

    public IEnumerable<EdmProperty> GetPropertiesWithDefaultValues(EntityType type)
    {
        return type.Properties.Where(p => p.TypeUsage.EdmType is SimpleType && p.DeclaringType == type && p.DefaultValue != null);
    }
    
    public IEnumerable<EdmProperty> GetPropertiesWithDefaultValues(ComplexType type)
    {
        return type.Properties.Where(p => p.TypeUsage.EdmType is SimpleType && p.DeclaringType == type && p.DefaultValue != null);
    }

    public IEnumerable<NavigationProperty> GetNavigationProperties(EntityType type)
    {
        return type.NavigationProperties.Where(np => np.DeclaringType == type && np.ToEndMember.RelationshipMultiplicity != RelationshipMultiplicity.Many);
    }
    
    public IEnumerable<NavigationProperty> GetCollectionNavigationProperties(EntityType type)
    {
        return type.NavigationProperties.Where(np => np.DeclaringType == type && np.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many);
    }
    
    public FunctionParameter GetReturnParameter(EdmFunction edmFunction)
    {
        ArgumentNotNull(edmFunction, "edmFunction");

        var returnParamsProperty = edmFunction.GetType().GetProperty("ReturnParameters");
        return returnParamsProperty == null
            ? edmFunction.ReturnParameter
            : ((IEnumerable<FunctionParameter>)returnParamsProperty.GetValue(edmFunction, null)).FirstOrDefault();
    }

    public bool IsComposable(EdmFunction edmFunction)
    {
        ArgumentNotNull(edmFunction, "edmFunction");

        var isComposableProperty = edmFunction.GetType().GetProperty("IsComposableAttribute");
        return isComposableProperty != null && (bool)isComposableProperty.GetValue(edmFunction, null);
    }

    public IEnumerable<FunctionImportParameter> GetParameters(EdmFunction edmFunction)
    {
        return FunctionImportParameter.Create(edmFunction.Parameters, _code, _ef);
    }

    public TypeUsage GetReturnType(EdmFunction edmFunction)
    {
        var returnParam = GetReturnParameter(edmFunction);
        return returnParam == null ? null : _ef.GetElementType(returnParam.TypeUsage);
    }
    
    public bool GenerateMergeOptionFunction(EdmFunction edmFunction, bool includeMergeOption)
    {
        var returnType = GetReturnType(edmFunction);
        return !includeMergeOption && returnType != null && returnType.EdmType.BuiltInTypeKind == BuiltInTypeKind.EntityType;
    }
}

public static void ArgumentNotNull<T>(T arg, string name) where T : class
{
    if (arg == null)
    {
        throw new ArgumentNullException(name);
    }
}
#>